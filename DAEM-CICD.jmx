<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="DAEM-ESSN" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="host" elementType="Argument">
            <stringProp name="Argument.name">host</stringProp>
            <stringProp name="Argument.value">daem.qa.internal.sirenanalytics.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Accept-Encoding</stringProp>
            <stringProp name="Header.value">gzip,deflate,sdch,br</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
        <collectionProp name="UserParameters.names">
          <stringProp name="-265713450">username</stringProp>
          <stringProp name="1216985755">password</stringProp>
          <stringProp name="1165729817">usernameAdmin</stringProp>
        </collectionProp>
        <collectionProp name="UserParameters.thread_values">
          <collectionProp name="-1148369565">
            <stringProp name="612377018">DAEM_USER_${__RandomString(2,abcdefghijklmnopqrstyvwxyz)}</stringProp>
            <stringProp name="565550154">password#123</stringProp>
            <stringProp name="541675598">wfpAdmin</stringProp>
          </collectionProp>
          <collectionProp name="24903448">
            <stringProp name="0"></stringProp>
            <stringProp name="0"></stringProp>
            <stringProp name="0"></stringProp>
          </collectionProp>
        </collectionProp>
        <boolProp name="UserParameters.per_iteration">false</boolProp>
      </UserParameters>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="ESSN " enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Daem Full Flow" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//Beanshell sampler has provided predefined list of variables which we can use in our script
import java.util.Random;
int x = Math.random()*10;
int y = Math.random()*6;
String[] fnames = {&quot;الياس&quot;, &quot;وائل&quot;, &quot;نائل&quot;, &quot;مازن&quot;, &quot;رامي&quot;, &quot;هادي&quot;, &quot;غنوة&quot;, &quot;فادي&quot; ,&quot;فايز&quot;, &quot;أنس&quot;};
String[] lnames = {&quot;شمعون&quot;, &quot;كوماتي&quot;, &quot;بطيخ&quot;, &quot;بو رجيلي&quot;, &quot;كانجا&quot;, &quot;حمزة&quot;, &quot;حاصباني&quot;, &quot;شبلي&quot; ,&quot;قصار&quot;, &quot;ضو&quot;};
String[] phones = {&quot;03&quot;, &quot;70&quot;, &quot;71&quot;, &quot;76&quot;,&quot;78&quot;, &quot;81&quot;, &quot;79&quot;};
var fname, lname,lebanesePhone;
vars.put(&quot;fname&quot;, fnames[x].toString());
vars.put(&quot;lname&quot;, lnames[x].toString());
vars.put(&quot;lebanesePhone&quot;, phones[y].toString());


</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="Synchronizing Timer" enabled="false">
              <intProp name="groupSize">4</intProp>
              <longProp name="timeoutInMs">2500</longProp>
            </SyncTimer>
            <hashTree/>
          </hashTree>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Mobile Number" enabled="true">
            <stringProp name="maximumValue">999999</stringProp>
            <stringProp name="minimumValue">100000</stringProp>
            <stringProp name="outputFormat">000000</stringProp>
            <boolProp name="perThread">false</boolProp>
            <stringProp name="randomSeed">100000</stringProp>
            <stringProp name="variableName">mobile</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="register" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;username&quot;:&quot;${username}_${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
	&quot;phoneNumber&quot;:&quot;03${mobile}&quot;,&#xd;
	&quot;password&quot;:&quot;${password}&quot;,&#xd;
	&quot;code&quot;:&quot;&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/impactservices/impact_aid_card_auth/auth/v2/register</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="register" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="register otp" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;username&quot;:&quot;${username}_${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
	&quot;phoneNumber&quot;:&quot;03${__Random(111111,999999)}&quot;,&#xd;
	&quot;password&quot;:&quot;${password}&quot;,&#xd;
	&quot;code&quot;:&quot;${__Random(1000,9999)}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/impactservices/impact_aid_card_auth/auth/v2/register/otp</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="access_token" enabled="true">
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.accessToken</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="register otp" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="approve terms 04" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;termsApproved&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/impactservices/impact_aid_card/aid_card/v1/user</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="approve terms" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-Authorization" elementType="Header">
                  <stringProp name="Header.name">X-Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="save" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;persons&quot;: [&#xd;
    {&#xd;
      &quot;uuid&quot;: 1,&#xd;
      &quot;firstName&quot;: null,&#xd;
      &quot;lastName&quot;: null,&#xd;
      &quot;fatherName&quot;: null,&#xd;
      &quot;motherFirstName&quot;: null,&#xd;
      &quot;motherLastName&quot;: null,&#xd;
      &quot;dateOfBirth&quot;: null,&#xd;
      &quot;countryOfBirth&quot;: null,&#xd;
      &quot;gender&quot;: null,&#xd;
      &quot;placeOfBirthText&quot;: null,&#xd;
      &quot;noIdentityCard&quot;: false,&#xd;
      &quot;idNumber&quot;: null,&#xd;
      &quot;passportNumber&quot;: null,&#xd;
      &quot;sixMonthResidency&quot;: null,&#xd;
      &quot;mobileNumber&quot;: &quot;03333333&quot;,&#xd;
      &quot;email&quot;: null,&#xd;
      &quot;registryNumber&quot;: null,&#xd;
      &quot;registryLocationText&quot;: null,&#xd;
      &quot;maritalStatus&quot;: null,&#xd;
      &quot;hasVehicle&quot;: true,&#xd;
      &quot;vehicles&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: null,&#xd;
          &quot;plateNumber&quot;: &quot;${__Random(100000,999999)}&quot;,&#xd;
          &quot;vehicleCategory&quot;: 1,&#xd;
          &quot;registrationYear&quot;: &quot;${__Random(1980,2000)}&quot;,&#xd;
          &quot;manufacturingYear&quot;: &quot;${__Random(1950,2022)}&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;last2MonthsFreshUSDIncome&quot;: null,&#xd;
      &quot;last2MonthsUSDIncome&quot;: null,&#xd;
      &quot;last2MonthsLBPIncome&quot;: null,&#xd;
      &quot;yearlyMoneyTransfers&quot;: null,&#xd;
      &quot;moneyTransfersCurrency&quot;: null,&#xd;
      &quot;yearlyOtherIncome&quot;: null,&#xd;
      &quot;otherIncomeCurrency&quot;: null,&#xd;
      &quot;employmentStatus&quot;: null,&#xd;
      &quot;workHours&quot;: null,&#xd;
      &quot;publicInstitutionType&quot;: null,&#xd;
      &quot;publicInstitution&quot;: null,&#xd;
      &quot;workPublicClass&quot;: null,&#xd;
      &quot;taxIdentificationNumber&quot;: null,&#xd;
      &quot;workSector&quot;: null,&#xd;
      &quot;workCategory&quot;: null,&#xd;
      &quot;otherWorkCategory&quot;: null,&#xd;
      &quot;hasBankAccount&quot;: null,&#xd;
      &quot;bankAccounts&quot;: [],&#xd;
      &quot;bankTotalUSDDeposits&quot;: null,&#xd;
      &quot;bankTotalFreshUSDDeposits&quot;: null,&#xd;
      &quot;bankTotalLBPDeposits&quot;: null,&#xd;
      &quot;bankTotalOtherDeposits&quot;: null,&#xd;
      &quot;otherDepositsCurrency&quot;: null,&#xd;
      &quot;headOfHouseHold&quot;: true,&#xd;
      &quot;files&quot;: []&#xd;
    },&#xd;
    {&#xd;
      &quot;uuid&quot;: 2,&#xd;
      &quot;firstName&quot;: null,&#xd;
      &quot;lastName&quot;: null,&#xd;
      &quot;fatherName&quot;: null,&#xd;
      &quot;motherFirstName&quot;: null,&#xd;
      &quot;motherLastName&quot;: null,&#xd;
      &quot;dateOfBirth&quot;: null,&#xd;
      &quot;countryOfBirth&quot;: null,&#xd;
      &quot;gender&quot;: null,&#xd;
      &quot;placeOfBirthText&quot;: null,&#xd;
      &quot;noIdentityCard&quot;: false,&#xd;
      &quot;idNumber&quot;: null,&#xd;
      &quot;passportNumber&quot;: null,&#xd;
      &quot;sixMonthResidency&quot;: null,&#xd;
      &quot;mobileNumber&quot;: &quot;03333333&quot;,&#xd;
      &quot;email&quot;: null,&#xd;
      &quot;registryNumber&quot;: null,&#xd;
      &quot;registryLocationText&quot;: null,&#xd;
      &quot;maritalStatus&quot;: null,&#xd;
      &quot;hasVehicle&quot;: null,&#xd;
      &quot;vehicles&quot;: [],&#xd;
      &quot;last2MonthsFreshUSDIncome&quot;: null,&#xd;
      &quot;last2MonthsUSDIncome&quot;: null,&#xd;
      &quot;last2MonthsLBPIncome&quot;: null,&#xd;
      &quot;yearlyMoneyTransfers&quot;: null,&#xd;
      &quot;moneyTransfersCurrency&quot;: null,&#xd;
      &quot;yearlyOtherIncome&quot;: null,&#xd;
      &quot;otherIncomeCurrency&quot;: null,&#xd;
      &quot;employmentStatus&quot;: null,&#xd;
      &quot;workHours&quot;: null,&#xd;
      &quot;publicInstitutionType&quot;: null,&#xd;
      &quot;publicInstitution&quot;: null,&#xd;
      &quot;workPublicClass&quot;: null,&#xd;
      &quot;taxIdentificationNumber&quot;: null,&#xd;
      &quot;workSector&quot;: null,&#xd;
      &quot;workCategory&quot;: null,&#xd;
      &quot;otherWorkCategory&quot;: null,&#xd;
      &quot;hasBankAccount&quot;: null,&#xd;
      &quot;bankAccounts&quot;: [],&#xd;
      &quot;bankTotalUSDDeposits&quot;: null,&#xd;
      &quot;bankTotalFreshUSDDeposits&quot;: null,&#xd;
      &quot;bankTotalLBPDeposits&quot;: null,&#xd;
      &quot;bankTotalOtherDeposits&quot;: null,&#xd;
      &quot;otherDepositsCurrency&quot;: null,&#xd;
      &quot;headOfHouseHold&quot;: true,&#xd;
      &quot;files&quot;: []&#xd;
    },&#xd;
    {&#xd;
      &quot;uuid&quot;: 3,&#xd;
      &quot;firstName&quot;: null,&#xd;
      &quot;lastName&quot;: null,&#xd;
      &quot;fatherName&quot;: null,&#xd;
      &quot;motherFirstName&quot;: null,&#xd;
      &quot;motherLastName&quot;: null,&#xd;
      &quot;dateOfBirth&quot;: null,&#xd;
      &quot;countryOfBirth&quot;: null,&#xd;
      &quot;gender&quot;: null,&#xd;
      &quot;placeOfBirthText&quot;: null,&#xd;
      &quot;noIdentityCard&quot;: false,&#xd;
      &quot;idNumber&quot;: null,&#xd;
      &quot;passportNumber&quot;: null,&#xd;
      &quot;sixMonthResidency&quot;: null,&#xd;
      &quot;mobileNumber&quot;: &quot;03333333&quot;,&#xd;
      &quot;email&quot;: null,&#xd;
      &quot;registryNumber&quot;: null,&#xd;
      &quot;registryLocationText&quot;: null,&#xd;
      &quot;maritalStatus&quot;: null,&#xd;
      &quot;hasVehicle&quot;: null,&#xd;
      &quot;vehicles&quot;: [],&#xd;
      &quot;last2MonthsFreshUSDIncome&quot;: null,&#xd;
      &quot;last2MonthsUSDIncome&quot;: null,&#xd;
      &quot;last2MonthsLBPIncome&quot;: null,&#xd;
      &quot;yearlyMoneyTransfers&quot;: null,&#xd;
      &quot;moneyTransfersCurrency&quot;: null,&#xd;
      &quot;yearlyOtherIncome&quot;: null,&#xd;
      &quot;otherIncomeCurrency&quot;: null,&#xd;
      &quot;employmentStatus&quot;: null,&#xd;
      &quot;workHours&quot;: null,&#xd;
      &quot;publicInstitutionType&quot;: null,&#xd;
      &quot;publicInstitution&quot;: null,&#xd;
      &quot;workPublicClass&quot;: null,&#xd;
      &quot;taxIdentificationNumber&quot;: null,&#xd;
      &quot;workSector&quot;: null,&#xd;
      &quot;workCategory&quot;: null,&#xd;
      &quot;otherWorkCategory&quot;: null,&#xd;
      &quot;hasBankAccount&quot;: null,&#xd;
      &quot;bankAccounts&quot;: [],&#xd;
      &quot;bankTotalUSDDeposits&quot;: null,&#xd;
      &quot;bankTotalFreshUSDDeposits&quot;: null,&#xd;
      &quot;bankTotalLBPDeposits&quot;: null,&#xd;
      &quot;bankTotalOtherDeposits&quot;: null,&#xd;
      &quot;otherDepositsCurrency&quot;: null,&#xd;
      &quot;headOfHouseHold&quot;: true,&#xd;
      &quot;files&quot;: []&#xd;
    },&#xd;
    {&#xd;
      &quot;uuid&quot;: 4,&#xd;
      &quot;firstName&quot;: null,&#xd;
      &quot;lastName&quot;: null,&#xd;
      &quot;fatherName&quot;: null,&#xd;
      &quot;motherFirstName&quot;: null,&#xd;
      &quot;motherLastName&quot;: null,&#xd;
      &quot;dateOfBirth&quot;: null,&#xd;
      &quot;countryOfBirth&quot;: null,&#xd;
      &quot;gender&quot;: null,&#xd;
      &quot;placeOfBirthText&quot;: null,&#xd;
      &quot;noIdentityCard&quot;: false,&#xd;
      &quot;idNumber&quot;: null,&#xd;
      &quot;passportNumber&quot;: null,&#xd;
      &quot;sixMonthResidency&quot;: null,&#xd;
      &quot;mobileNumber&quot;: &quot;03333333&quot;,&#xd;
      &quot;email&quot;: null,&#xd;
      &quot;registryNumber&quot;: null,&#xd;
      &quot;registryLocationText&quot;: null,&#xd;
      &quot;maritalStatus&quot;: null,&#xd;
      &quot;hasVehicle&quot;: null,&#xd;
      &quot;vehicles&quot;: [],&#xd;
      &quot;last2MonthsFreshUSDIncome&quot;: null,&#xd;
      &quot;last2MonthsUSDIncome&quot;: null,&#xd;
      &quot;last2MonthsLBPIncome&quot;: null,&#xd;
      &quot;yearlyMoneyTransfers&quot;: null,&#xd;
      &quot;moneyTransfersCurrency&quot;: null,&#xd;
      &quot;yearlyOtherIncome&quot;: null,&#xd;
      &quot;otherIncomeCurrency&quot;: null,&#xd;
      &quot;employmentStatus&quot;: null,&#xd;
      &quot;workHours&quot;: null,&#xd;
      &quot;publicInstitutionType&quot;: null,&#xd;
      &quot;publicInstitution&quot;: null,&#xd;
      &quot;workPublicClass&quot;: null,&#xd;
      &quot;taxIdentificationNumber&quot;: null,&#xd;
      &quot;workSector&quot;: null,&#xd;
      &quot;workCategory&quot;: null,&#xd;
      &quot;otherWorkCategory&quot;: null,&#xd;
      &quot;hasBankAccount&quot;: null,&#xd;
      &quot;bankAccounts&quot;: [],&#xd;
      &quot;bankTotalUSDDeposits&quot;: null,&#xd;
      &quot;bankTotalFreshUSDDeposits&quot;: null,&#xd;
      &quot;bankTotalLBPDeposits&quot;: null,&#xd;
      &quot;bankTotalOtherDeposits&quot;: null,&#xd;
      &quot;otherDepositsCurrency&quot;: null,&#xd;
      &quot;headOfHouseHold&quot;: true,&#xd;
      &quot;files&quot;: []&#xd;
    }&#xd;
  ],&#xd;
  &quot;familyMembersLiveTogether&quot;: null,&#xd;
  &quot;termsApproved&quot;: null,&#xd;
  &quot;filledByHeadOfHouseHold&quot;: true,&#xd;
  &quot;filledByRepresentative&quot;: false,&#xd;
  &quot;representativeFatherName&quot;: null,&#xd;
  &quot;representativeFirstName&quot;: null,&#xd;
  &quot;representativeLastName&quot;: null,&#xd;
  &quot;representativeMobileNumber&quot;: null,&#xd;
  &quot;representativeFamilyRelation&quot;: null,&#xd;
  &quot;landlineNumber&quot;: null,&#xd;
  &quot;familyMembersNumber&quot;: null,&#xd;
  &quot;locality&quot;: null,&#xd;
  &quot;mouhafaza&quot;: null,&#xd;
  &quot;kadaa&quot;: null,&#xd;
  &quot;town&quot;: null,&#xd;
  &quot;neighborhood&quot;: null,&#xd;
  &quot;ownership&quot;: null,&#xd;
  &quot;street&quot;: null,&#xd;
  &quot;floor&quot;: null,&#xd;
  &quot;apartment&quot;: null,&#xd;
  &quot;nearestLocation&quot;: null,&#xd;
  &quot;domesticWorkersNumber&quot;: null,&#xd;
  &quot;hasDisabledMember&quot;: null,&#xd;
  &quot;accommodations&quot;: [&#xd;
    {&#xd;
      &quot;id&quot;: null,&#xd;
      &quot;type&quot;: null,&#xd;
      &quot;otherType&quot;: null,&#xd;
      &quot;property&quot;: null,&#xd;
      &quot;otherProperty&quot;: null,&#xd;
      &quot;area&quot;: null,&#xd;
      &quot;roomsNumber&quot;: null,&#xd;
      &quot;rentCurrency&quot;: null,&#xd;
      &quot;rent&quot;: null,&#xd;
      &quot;bathRoomsNumber&quot;: null&#xd;
    }&#xd;
  ],&#xd;
  &quot;benefitFromNPTP&quot;: null,&#xd;
  &quot;benefitFromWFP&quot;: null&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/impactservices/impact_aid_card/aid_card/v1/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="user_id" enabled="true">
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">user_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="save" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-Authorization" elementType="Header">
                  <stringProp name="Header.name">X-Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="Synchronizing Timer" enabled="true">
              <intProp name="groupSize">5</intProp>
              <longProp name="timeoutInMs">2000</longProp>
            </SyncTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Acc ID" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/impactservices/impact_aid_card/aid_card/v1/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="save" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-Authorization" elementType="Header">
                  <stringProp name="Header.name">X-Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="accommodation_id" enabled="true">
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">accommodation_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.accommodations[0].id</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET All Persons" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/impactservices/impact_aid_card/aid_card/v1/persons</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSONExtractor" enabled="true">
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">person_id;person_id_2; person_id_3; person_id_4; vehicle_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$[0].id;$[1].id; $[2].id; $[3].id; $[0].vehicles[0].id</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NO_PERSON_1;NO_PERSON_2;NO_PERSON_3;NO_PERSON_4; NO_VEHICLE_ID</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="save" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-Authorization" elementType="Header">
                  <stringProp name="Header.name">X-Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="person_id_2" enabled="false">
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">person_id_2</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$[1].id</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="save person information 020" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: ${user_id},&#xd;
  &quot;persons&quot;: [&#xd;
    {&#xd;
      &quot;id&quot;: ${person_id},&#xd;
      &quot;uuid&quot;: 1,&#xd;
      &quot;firstName&quot;: &quot;${fname}&quot;,&#xd;
      &quot;lastName&quot;: &quot;${lname}&quot;,&#xd;
      &quot;fatherName&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
      &quot;motherFirstName&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
      &quot;motherLastName&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
      &quot;dateOfBirth&quot;: &quot;7/${__Random(1,12)}/${__Random(1950,2022)}&quot;,&#xd;
      &quot;countryOfBirth&quot;: 1,&#xd;
      &quot;gender&quot;: ${__Random(1,2)},&#xd;
      &quot;placeOfBirthText&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
      &quot;noIdentityCard&quot;: false,&#xd;
      &quot;idNumber&quot;: &quot;${__Random(111111111111,999999999999)}&quot;,&#xd;
      &quot;passportNumber&quot;: &quot;${__Random(111111111111,999999999999)}&quot;,&#xd;
      &quot;sixMonthResidency&quot;: false,&#xd;
      &quot;mobileNumber&quot;: &quot;81${__Random(100000,999999)}&quot;,&#xd;
      &quot;email&quot;: &quot;${username}@mail.com&quot;,&#xd;
      &quot;registryNumber&quot;: &quot;${__Random(111111111111,999999999999)}&quot;,&#xd;
      &quot;registryLocationText&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
      &quot;maritalStatus&quot;: 1,&#xd;
      &quot;hasVehicle&quot;: true,&#xd;
      &quot;vehicles&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${vehicle_id},&#xd;
          &quot;plateNumber&quot;: &quot;${__Random(100000,999999)}&quot;,&#xd;
          &quot;vehicleCategory&quot;: 1,&#xd;
          &quot;registrationYear&quot;: &quot;${__Random(2000,2022)}&quot;,&#xd;
          &quot;manufacturingYear&quot;: &quot;${__Random(1950,1999)}&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;last2MonthsFreshUSDIncome&quot;: ${__Random(1,100)},&#xd;
      &quot;last2MonthsUSDIncome&quot;: ${__Random(1000,1999)},&#xd;
      &quot;last2MonthsLBPIncome&quot;: ${__Random(10000,90000)},&#xd;
      &quot;yearlyMoneyTransfers&quot;: ${__Random(100,999)},&#xd;
      &quot;moneyTransfersCurrency&quot;: 4,&#xd;
      &quot;yearlyOtherIncome&quot;: ${__Random(10000,99999)},&#xd;
      &quot;otherIncomeCurrency&quot;: 2,&#xd;
      &quot;employmentStatus&quot;: 2,&#xd;
      &quot;workHours&quot;: null,&#xd;
      &quot;publicInstitutionType&quot;: null,&#xd;
      &quot;publicInstitution&quot;: null,&#xd;
      &quot;workPublicClass&quot;: null,&#xd;
      &quot;taxIdentificationNumber&quot;: &quot;${__Random(10000000,99999999)}&quot;,&#xd;
      &quot;workSector&quot;: null,&#xd;
      &quot;workCategory&quot;: null,&#xd;
      &quot;otherWorkCategory&quot;: null,&#xd;
      &quot;hasBankAccount&quot;: false,&#xd;
      &quot;bankAccounts&quot;: [],&#xd;
      &quot;bankTotalUSDDeposits&quot;: null,&#xd;
      &quot;bankTotalFreshUSDDeposits&quot;: null,&#xd;
      &quot;bankTotalLBPDeposits&quot;: null,&#xd;
      &quot;bankTotalOtherDeposits&quot;: null,&#xd;
      &quot;otherDepositsCurrency&quot;: null,&#xd;
      &quot;headOfHouseHold&quot;: true,&#xd;
      &quot;files&quot;: []&#xd;
    },&#xd;
    {&#xd;
	  &quot;id&quot;: ${person_id_2},&#xd;
	  &quot;familyRelation&quot;: ${__Random(1,5)},&#xd;
	  &quot;otherFamilyRelation&quot;: null,&#xd;
	  &quot;noIdentityCard&quot;: false,&#xd;
	  &quot;idNumber&quot;: &quot;${__Random(00001000000000,00009999999999)}&quot;,&#xd;
	  &quot;passportNumber&quot;: &quot;${__Random(00001000000000,00009999999999)}&quot;,&#xd;
	  &quot;firstName&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
	  &quot;lastName&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
	  &quot;fatherName&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
	  &quot;motherFirstName&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
	  &quot;motherLastName&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
	  &quot;dateOfBirth&quot;: &quot;7/${__Random(1,12)}/${__Random(1950,2022)}&quot;,&#xd;
	  &quot;countryOfBirth&quot;: 1,&#xd;
	  &quot;gender&quot;: ${__Random(1,2)},&#xd;
	  &quot;placeOfBirthText&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
	  &quot;sixMonthResidency&quot;: false,&#xd;
	  &quot;mobileNumber&quot;: &quot;76${__Random(100000,999999)}&quot;,&#xd;
	  &quot;email&quot;: &quot;${__RandomString(7,ABCDEFGHIJK)}@mail.com&quot;,&#xd;
	  &quot;registryNumber&quot;: &quot;${__Random(00001000000000,00009999999999)}&quot;,&#xd;
	  &quot;registryLocationText&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
	  &quot;maritalStatus&quot;: ${__Random(1,2)},&#xd;
	  &quot;files&quot;: [],&#xd;
	  &quot;hasVehicle&quot;: false,&#xd;
	  &quot;vehicles&quot;: [],&#xd;
	  &quot;last2MonthsFreshUSDIncome&quot;: ${__Random(1,1000)},&#xd;
	  &quot;last2MonthsUSDIncome&quot;: ${__Random(1,1000)},&#xd;
	  &quot;last2MonthsLBPIncome&quot;: ${__Random(100000,999999)},&#xd;
	  &quot;yearlyMoneyTransfers&quot;: ${__Random(100,999999)},&#xd;
	  &quot;moneyTransfersCurrency&quot;: ${__Random(1,4)},&#xd;
	  &quot;yearlyOtherIncome&quot;: ${__Random(1,1000)},&#xd;
	  &quot;otherIncomeCurrency&quot;: ${__Random(1,2)},&#xd;
	  &quot;employmentStatus&quot;: 1,&#xd;
	  &quot;workHours&quot;: 1,&#xd;
	  &quot;taxIdentificationNumber&quot;: &quot;${__Random(111111111,999999999)}&quot;,&#xd;
	  &quot;workSector&quot;: 2,&#xd;
	  &quot;workCategory&quot;: ${__Random(1,10)},&#xd;
	  &quot;otherWorkCategory&quot;: null,&#xd;
	  &quot;publicInstitutionType&quot;: null,&#xd;
	  &quot;publicInstitution&quot;: null,&#xd;
	  &quot;workPublicClass&quot;: null,&#xd;
	  &quot;hasBankAccount&quot;: false,&#xd;
	  &quot;bankAccounts&quot;: [],&#xd;
	  &quot;bankTotalUSDDeposits&quot;: null,&#xd;
	  &quot;bankTotalFreshUSDDeposits&quot;: null,&#xd;
	  &quot;bankTotalLBPDeposits&quot;: null,&#xd;
	  &quot;bankTotalOtherDeposits&quot;: null,&#xd;
	  &quot;otherDepositsCurrency&quot;: null,&#xd;
	  &quot;uuid&quot;: 2&#xd;
   },&#xd;
   {&#xd;
	  &quot;id&quot;: ${person_id_3},&#xd;
	  &quot;familyRelation&quot;: ${__Random(1,5)},&#xd;
	  &quot;otherFamilyRelation&quot;: null,&#xd;
	  &quot;noIdentityCard&quot;: false,&#xd;
	  &quot;idNumber&quot;: &quot;${__Random(00001000000000,00009999999999)}&quot;,&#xd;
	  &quot;passportNumber&quot;: &quot;${__Random(00001000000000,00009999999999)}&quot;,&#xd;
	  &quot;firstName&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
	  &quot;lastName&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
	  &quot;fatherName&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
	  &quot;motherFirstName&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
	  &quot;motherLastName&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
	  &quot;dateOfBirth&quot;: &quot;7/${__Random(1,12)}/${__Random(1950,2022)}&quot;,&#xd;
	  &quot;countryOfBirth&quot;: 1,&#xd;
	  &quot;gender&quot;: ${__Random(1,2)},&#xd;
	  &quot;placeOfBirthText&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
	  &quot;sixMonthResidency&quot;: false,&#xd;
	  &quot;mobileNumber&quot;: &quot;76${__Random(100000,999999)}&quot;,&#xd;
	  &quot;email&quot;: &quot;${__RandomString(7,ABCDEFGHIJK)}@mail.com&quot;,&#xd;
	  &quot;registryNumber&quot;: &quot;${__Random(00001000000000,00009999999999)}&quot;,&#xd;
	  &quot;registryLocationText&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
	  &quot;maritalStatus&quot;: ${__Random(1,2)},&#xd;
	  &quot;files&quot;: [],&#xd;
	  &quot;hasVehicle&quot;: false,&#xd;
	  &quot;vehicles&quot;: [],&#xd;
	  &quot;last2MonthsFreshUSDIncome&quot;: ${__Random(1,1000)},&#xd;
	  &quot;last2MonthsUSDIncome&quot;: ${__Random(1,1000)},&#xd;
	  &quot;last2MonthsLBPIncome&quot;: ${__Random(100000,999999)},&#xd;
	  &quot;yearlyMoneyTransfers&quot;: ${__Random(100,999999)},&#xd;
	  &quot;moneyTransfersCurrency&quot;: ${__Random(1,4)},&#xd;
	  &quot;yearlyOtherIncome&quot;: ${__Random(1,1000)},&#xd;
	  &quot;otherIncomeCurrency&quot;: ${__Random(1,2)},&#xd;
	  &quot;employmentStatus&quot;: 1,&#xd;
	  &quot;workHours&quot;: 1,&#xd;
	  &quot;taxIdentificationNumber&quot;: &quot;${__Random(111111111,999999999)}&quot;,&#xd;
	  &quot;workSector&quot;: 2,&#xd;
	  &quot;workCategory&quot;: ${__Random(1,10)},&#xd;
	  &quot;otherWorkCategory&quot;: null,&#xd;
	  &quot;publicInstitutionType&quot;: null,&#xd;
	  &quot;publicInstitution&quot;: null,&#xd;
	  &quot;workPublicClass&quot;: null,&#xd;
	  &quot;hasBankAccount&quot;: false,&#xd;
	  &quot;bankAccounts&quot;: [],&#xd;
	  &quot;bankTotalUSDDeposits&quot;: null,&#xd;
	  &quot;bankTotalFreshUSDDeposits&quot;: null,&#xd;
	  &quot;bankTotalLBPDeposits&quot;: null,&#xd;
	  &quot;bankTotalOtherDeposits&quot;: null,&#xd;
	  &quot;otherDepositsCurrency&quot;: null,&#xd;
	  &quot;uuid&quot;: 3&#xd;
   },&#xd;
    {&#xd;
	  &quot;id&quot;: ${person_id_4},&#xd;
	  &quot;familyRelation&quot;: ${__Random(1,5)},&#xd;
	  &quot;otherFamilyRelation&quot;: null,&#xd;
	  &quot;noIdentityCard&quot;: false,&#xd;
	  &quot;idNumber&quot;: &quot;${__Random(00001000000000,00009999999999)}&quot;,&#xd;
	  &quot;passportNumber&quot;: &quot;${__Random(00001000000000,00009999999999)}&quot;,&#xd;
	  &quot;firstName&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
	  &quot;lastName&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
	  &quot;fatherName&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
	  &quot;motherFirstName&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
	  &quot;motherLastName&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
	  &quot;dateOfBirth&quot;: &quot;7/${__Random(1,12)}/${__Random(1950,2022)}&quot;,&#xd;
	  &quot;countryOfBirth&quot;: 1,&#xd;
	  &quot;gender&quot;: ${__Random(1,2)},&#xd;
	  &quot;placeOfBirthText&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
	  &quot;sixMonthResidency&quot;: false,&#xd;
	  &quot;mobileNumber&quot;: &quot;76${__Random(100000,999999)}&quot;,&#xd;
	  &quot;email&quot;: &quot;${__RandomString(7,ABCDEFGHIJK)}@mail.com&quot;,&#xd;
	  &quot;registryNumber&quot;: &quot;${__Random(00001000000000,00009999999999)}&quot;,&#xd;
	  &quot;registryLocationText&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
	  &quot;maritalStatus&quot;: ${__Random(1,2)},&#xd;
	  &quot;files&quot;: [],&#xd;
	  &quot;hasVehicle&quot;: false,&#xd;
	  &quot;vehicles&quot;: [],&#xd;
	  &quot;last2MonthsFreshUSDIncome&quot;: ${__Random(1,1000)},&#xd;
	  &quot;last2MonthsUSDIncome&quot;: ${__Random(1,1000)},&#xd;
	  &quot;last2MonthsLBPIncome&quot;: ${__Random(100000,999999)},&#xd;
	  &quot;yearlyMoneyTransfers&quot;: ${__Random(100,999999)},&#xd;
	  &quot;moneyTransfersCurrency&quot;: ${__Random(1,4)},&#xd;
	  &quot;yearlyOtherIncome&quot;: ${__Random(1,1000)},&#xd;
	  &quot;otherIncomeCurrency&quot;: ${__Random(1,2)},&#xd;
	  &quot;employmentStatus&quot;: 1,&#xd;
	  &quot;workHours&quot;: 1,&#xd;
	  &quot;taxIdentificationNumber&quot;: &quot;${__Random(111111111,999999999)}&quot;,&#xd;
	  &quot;workSector&quot;: 2,&#xd;
	  &quot;workCategory&quot;: ${__Random(1,10)},&#xd;
	  &quot;otherWorkCategory&quot;: null,&#xd;
	  &quot;publicInstitutionType&quot;: null,&#xd;
	  &quot;publicInstitution&quot;: null,&#xd;
	  &quot;workPublicClass&quot;: null,&#xd;
	  &quot;hasBankAccount&quot;: false,&#xd;
	  &quot;bankAccounts&quot;: [],&#xd;
	  &quot;bankTotalUSDDeposits&quot;: null,&#xd;
	  &quot;bankTotalFreshUSDDeposits&quot;: null,&#xd;
	  &quot;bankTotalLBPDeposits&quot;: null,&#xd;
	  &quot;bankTotalOtherDeposits&quot;: null,&#xd;
	  &quot;otherDepositsCurrency&quot;: null,&#xd;
	  &quot;uuid&quot;: 4&#xd;
   }&#xd;
   &#xd;
  ],&#xd;
  &quot;familyMembersLiveTogether&quot;: true,&#xd;
  &quot;termsApproved&quot;: true,&#xd;
  &quot;filledByHeadOfHouseHold&quot;: true,&#xd;
  &quot;filledByRepresentative&quot;: false,&#xd;
  &quot;representativeFatherName&quot;: null,&#xd;
  &quot;representativeFirstName&quot;: null,&#xd;
  &quot;representativeLastName&quot;: null,&#xd;
  &quot;representativeMobileNumber&quot;: null,&#xd;
  &quot;representativeFamilyRelation&quot;: null,&#xd;
  &quot;landlineNumber&quot;: &quot;01${__Random(100000,999999)}&quot;,&#xd;
  &quot;familyMembersNumber&quot;: 1,&#xd;
  &quot;locality&quot;: 1034,&#xd;
  &quot;mouhafaza&quot;: 7,&#xd;
  &quot;kadaa&quot;: 25,&#xd;
  &quot;town&quot;: 708,&#xd;
  &quot;neighborhood&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
  &quot;street&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
  &quot;ownership&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
  &quot;floor&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
  &quot;apartment&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
  &quot;nearestLocation&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
  &quot;domesticWorkersNumber&quot;: 0,&#xd;
  &quot;hasDisabledMember&quot;: false,&#xd;
  &quot;accommodations&quot;: [&#xd;
    {&#xd;
      &quot;id&quot;: null,&#xd;
      &quot;type&quot;: 1,&#xd;
      &quot;property&quot;: 1,&#xd;
      &quot;area&quot;: 1,&#xd;
      &quot;roomsNumber&quot;: ${__Random(1,4)},&#xd;
      &quot;rentCurrency&quot;: null,&#xd;
      &quot;rent&quot;: null,&#xd;
      &quot;bathRoomsNumber&quot;: ${__Random(1,2)}&#xd;
    }&#xd;
  ],&#xd;
  &quot;benefitFromNPTP&quot;: false,&#xd;
  &quot;benefitFromWFP&quot;: false&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/impactservices/impact_aid_card/aid_card/v1/</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="save form" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-Authorization" elementType="Header">
                  <stringProp name="Header.name">X-Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 ok" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="submit " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: ${user_id},&#xd;
  &quot;persons&quot;: [&#xd;
    {&#xd;
      &quot;id&quot;: ${person_id},&#xd;
      &quot;uuid&quot;: 1,&#xd;
      &quot;firstName&quot;: &quot;${fname}&quot;,&#xd;
      &quot;lastName&quot;: &quot;${lname}&quot;,&#xd;
      &quot;fatherName&quot;: &quot;${fname}&quot;,&#xd;
      &quot;motherFirstName&quot;: &quot;${fname}&quot;,&#xd;
      &quot;motherLastName&quot;: &quot;${fname}&quot;,&#xd;
      &quot;dateOfBirth&quot;: &quot;7/${__Random(1,12)}/${__Random(1950,2010)}&quot;,&#xd;
      &quot;countryOfBirth&quot;: 1,&#xd;
      &quot;gender&quot;: ${__Random(1,2)},&#xd;
      &quot;placeOfBirthText&quot;: &quot;${fname}&quot;,&#xd;
      &quot;noIdentityCard&quot;: false,&#xd;
      &quot;idNumber&quot;: &quot;${__Random(111111111111,999999999999)}&quot;,&#xd;
      &quot;passportNumber&quot;: &quot;${__Random(000000000000,999999999999)}&quot;,&#xd;
      &quot;sixMonthResidency&quot;: false,&#xd;
      &quot;mobileNumber&quot;: &quot;${lebanesePhone}${__Random(100000,999999)}&quot;,&#xd;
      &quot;email&quot;: &quot;${username}@mail.com&quot;,&#xd;
      &quot;registryNumber&quot;: &quot;${__Random(00001000000000,00009999999999)}&quot;,&#xd;
      &quot;registryLocationText&quot;: &quot;${fname}&quot;,&#xd;
      &quot;maritalStatus&quot;: 1,&#xd;
      &quot;hasVehicle&quot;: true,&#xd;
      &quot;vehicles&quot;: [&#xd;
       {&#xd;
          &quot;id&quot;: ${vehicle_id},&#xd;
          &quot;plateNumber&quot;: &quot;${__Random(100000,999999)}&quot;,&#xd;
          &quot;vehicleCategory&quot;: 1,&#xd;
          &quot;registrationYear&quot;: &quot;${__Random(2000,2022)}&quot;,&#xd;
          &quot;manufacturingYear&quot;: &quot;${__Random(1950,1999)}&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;last2MonthsFreshUSDIncome&quot;: ${__Random(1,100)},&#xd;
      &quot;last2MonthsUSDIncome&quot;: ${__Random(1000,1999)},&#xd;
      &quot;last2MonthsLBPIncome&quot;: ${__Random(10000,90000)},&#xd;
      &quot;yearlyMoneyTransfers&quot;: ${__Random(100,999)},&#xd;
      &quot;moneyTransfersCurrency&quot;: 4,&#xd;
      &quot;yearlyOtherIncome&quot;: ${__Random(10000,99999)},&#xd;
      &quot;otherIncomeCurrency&quot;: 2,&#xd;
      &quot;employmentStatus&quot;: 2,&#xd;
      &quot;workHours&quot;: null,&#xd;
      &quot;publicInstitutionType&quot;: null,&#xd;
      &quot;publicInstitution&quot;: null,&#xd;
      &quot;workPublicClass&quot;: null,&#xd;
      &quot;taxIdentificationNumber&quot;: &quot;${__Random(10000000,99999999)}&quot;,&#xd;
      &quot;workSector&quot;: null,&#xd;
      &quot;workCategory&quot;: null,&#xd;
      &quot;otherWorkCategory&quot;: null,&#xd;
      &quot;hasBankAccount&quot;: false,&#xd;
      &quot;bankAccounts&quot;: [],&#xd;
      &quot;bankTotalUSDDeposits&quot;: null,&#xd;
      &quot;bankTotalFreshUSDDeposits&quot;: null,&#xd;
      &quot;bankTotalLBPDeposits&quot;: null,&#xd;
      &quot;bankTotalOtherDeposits&quot;: null,&#xd;
      &quot;otherDepositsCurrency&quot;: null,&#xd;
      &quot;headOfHouseHold&quot;: true,&#xd;
      &quot;files&quot;: []&#xd;
    },&#xd;
    {&#xd;
	  &quot;id&quot;: ${person_id_2},&#xd;
	  &quot;familyRelation&quot;: ${__Random(1,5)},&#xd;
	  &quot;otherFamilyRelation&quot;: null,&#xd;
	  &quot;noIdentityCard&quot;: false,&#xd;
	  &quot;idNumber&quot;: &quot;${__Random(111111111111,999999999999)}&quot;,&#xd;
	  &quot;passportNumber&quot;: &quot;${__Random(00001000000000,00009999999999)}&quot;,&#xd;
	  &quot;firstName&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
	  &quot;lastName&quot;: &quot;${lname}&quot;,&#xd;
	  &quot;fatherName&quot;: &quot;${fname}&quot;,&#xd;
	  &quot;motherFirstName&quot;: &quot;${fname}&quot;,&#xd;
	  &quot;motherLastName&quot;: &quot;${fname}&quot;,&#xd;
	  &quot;dateOfBirth&quot;: &quot;7/${__Random(1,12)}/${__Random(1950,2010)}&quot;,&#xd;
	  &quot;countryOfBirth&quot;: 1,&#xd;
	  &quot;gender&quot;: ${__Random(1,2)},&#xd;
	  &quot;placeOfBirthText&quot;: &quot;${fname}&quot;,&#xd;
	  &quot;sixMonthResidency&quot;: false,&#xd;
	  &quot;mobileNumber&quot;: &quot;${lebanesePhone}${__Random(100000,999999)}&quot;,&#xd;
	  &quot;email&quot;: &quot;${__RandomString(7,ABCDEFGHIJK)}@mail.com&quot;,&#xd;
	  &quot;registryNumber&quot;: &quot;${__Random(00001000000000,00009999999999)}&quot;,&#xd;
	  &quot;registryLocationText&quot;: &quot;${fname}&quot;,&#xd;
	  &quot;maritalStatus&quot;: ${__Random(1,2)},&#xd;
	  &quot;files&quot;: [],&#xd;
	  &quot;hasVehicle&quot;: false,&#xd;
	  &quot;vehicles&quot;: [],&#xd;
	  &quot;last2MonthsFreshUSDIncome&quot;: ${__Random(1,1000)},&#xd;
	  &quot;last2MonthsUSDIncome&quot;: ${__Random(1,1000)},&#xd;
	  &quot;last2MonthsLBPIncome&quot;: ${__Random(100000,999999)},&#xd;
	  &quot;yearlyMoneyTransfers&quot;: ${__Random(100,999999)},&#xd;
	  &quot;moneyTransfersCurrency&quot;: ${__Random(1,4)},&#xd;
	  &quot;yearlyOtherIncome&quot;: ${__Random(1,1000)},&#xd;
	  &quot;otherIncomeCurrency&quot;: ${__Random(1,2)},&#xd;
	  &quot;employmentStatus&quot;: 1,&#xd;
	  &quot;workHours&quot;: 1,&#xd;
	  &quot;taxIdentificationNumber&quot;: &quot;${__Random(111111111,999999999)}&quot;,&#xd;
	  &quot;workSector&quot;: 2,&#xd;
	  &quot;workCategory&quot;: ${__Random(1,10)},&#xd;
	  &quot;otherWorkCategory&quot;: null,&#xd;
	  &quot;publicInstitutionType&quot;: null,&#xd;
	  &quot;publicInstitution&quot;: null,&#xd;
	  &quot;workPublicClass&quot;: null,&#xd;
	  &quot;hasBankAccount&quot;: false,&#xd;
	  &quot;bankAccounts&quot;: [],&#xd;
	  &quot;bankTotalUSDDeposits&quot;: null,&#xd;
	  &quot;bankTotalFreshUSDDeposits&quot;: null,&#xd;
	  &quot;bankTotalLBPDeposits&quot;: null,&#xd;
	  &quot;bankTotalOtherDeposits&quot;: null,&#xd;
	  &quot;otherDepositsCurrency&quot;: null,&#xd;
	  &quot;uuid&quot;: 2&#xd;
   },&#xd;
    {&#xd;
	  &quot;id&quot;: ${person_id_3},&#xd;
	  &quot;familyRelation&quot;: ${__Random(1,5)},&#xd;
	  &quot;otherFamilyRelation&quot;: null,&#xd;
	  &quot;noIdentityCard&quot;: false,&#xd;
	  &quot;idNumber&quot;: &quot;${__Random(111111111111,999999999999)}&quot;,&#xd;
	  &quot;passportNumber&quot;: &quot;${__Random(00001000000000,00009999999999)}&quot;,&#xd;
	  &quot;firstName&quot;:&quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
	  &quot;lastName&quot;: &quot;${lname}&quot;,&#xd;
	  &quot;fatherName&quot;: &quot;${fname}&quot;,&#xd;
	  &quot;motherFirstName&quot;: &quot;${fname}&quot;,&#xd;
	  &quot;motherLastName&quot;: &quot;${fname}&quot;,&#xd;
	  &quot;dateOfBirth&quot;: &quot;7/${__Random(1,12)}/${__Random(1950,2010)}&quot;,&#xd;
	  &quot;countryOfBirth&quot;: 1,&#xd;
	  &quot;gender&quot;: ${__Random(1,2)},&#xd;
	  &quot;placeOfBirthText&quot;: &quot;${fname}&quot;,&#xd;
	  &quot;sixMonthResidency&quot;: false,&#xd;
	  &quot;mobileNumber&quot;: &quot;${lebanesePhone}${__Random(100000,999999)}&quot;,&#xd;
	  &quot;email&quot;: &quot;${__RandomString(7,ABCDEFGHIJK)}@mail.com&quot;,&#xd;
	  &quot;registryNumber&quot;: &quot;${__Random(00001000000000,00009999999999)}&quot;,&#xd;
	  &quot;registryLocationText&quot;: &quot;${fname}&quot;,&#xd;
	  &quot;maritalStatus&quot;: ${__Random(1,2)},&#xd;
	  &quot;files&quot;: [],&#xd;
	  &quot;hasVehicle&quot;: false,&#xd;
	  &quot;vehicles&quot;: [],&#xd;
	  &quot;last2MonthsFreshUSDIncome&quot;: ${__Random(1,1000)},&#xd;
	  &quot;last2MonthsUSDIncome&quot;: ${__Random(1,1000)},&#xd;
	  &quot;last2MonthsLBPIncome&quot;: ${__Random(100000,999999)},&#xd;
	  &quot;yearlyMoneyTransfers&quot;: ${__Random(100,999999)},&#xd;
	  &quot;moneyTransfersCurrency&quot;: ${__Random(1,4)},&#xd;
	  &quot;yearlyOtherIncome&quot;: ${__Random(1,1000)},&#xd;
	  &quot;otherIncomeCurrency&quot;: ${__Random(1,2)},&#xd;
	  &quot;employmentStatus&quot;: 1,&#xd;
	  &quot;workHours&quot;: 1,&#xd;
	  &quot;taxIdentificationNumber&quot;: &quot;${__Random(111111111,999999999)}&quot;,&#xd;
	  &quot;workSector&quot;: 2,&#xd;
	  &quot;workCategory&quot;: ${__Random(1,10)},&#xd;
	  &quot;otherWorkCategory&quot;: null,&#xd;
	  &quot;publicInstitutionType&quot;: null,&#xd;
	  &quot;publicInstitution&quot;: null,&#xd;
	  &quot;workPublicClass&quot;: null,&#xd;
	  &quot;hasBankAccount&quot;: false,&#xd;
	  &quot;bankAccounts&quot;: [],&#xd;
	  &quot;bankTotalUSDDeposits&quot;: null,&#xd;
	  &quot;bankTotalFreshUSDDeposits&quot;: null,&#xd;
	  &quot;bankTotalLBPDeposits&quot;: null,&#xd;
	  &quot;bankTotalOtherDeposits&quot;: null,&#xd;
	  &quot;otherDepositsCurrency&quot;: null,&#xd;
	  &quot;uuid&quot;: 3&#xd;
	  },&#xd;
	  {&#xd;
	  &quot;id&quot;: ${person_id_4},&#xd;
	  &quot;familyRelation&quot;: ${__Random(1,5)},&#xd;
	  &quot;otherFamilyRelation&quot;: null,&#xd;
	  &quot;noIdentityCard&quot;: false,&#xd;
	  &quot;idNumber&quot;: &quot;${__Random(111111111111,999999999999)}&quot;,&#xd;
	  &quot;passportNumber&quot;: &quot;${__Random(00001000000000,00009999999999)}&quot;,&#xd;
	  &quot;firstName&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
	  &quot;lastName&quot;: &quot;${lname}&quot;,&#xd;
	  &quot;fatherName&quot;: &quot;${fname}&quot;,&#xd;
	  &quot;motherFirstName&quot;: &quot;${fname}&quot;,&#xd;
	  &quot;motherLastName&quot;: &quot;${fname}&quot;,&#xd;
	  &quot;dateOfBirth&quot;: &quot;7/${__Random(1,12)}/${__Random(1950,2010)}&quot;,&#xd;
	  &quot;countryOfBirth&quot;: 1,&#xd;
	  &quot;gender&quot;: ${__Random(1,2)},&#xd;
	  &quot;placeOfBirthText&quot;: &quot;${fname}&quot;,&#xd;
	  &quot;sixMonthResidency&quot;: false,&#xd;
	  &quot;mobileNumber&quot;: &quot;${lebanesePhone}${__Random(100000,999999)}&quot;,&#xd;
	  &quot;email&quot;: &quot;${__RandomString(7,ABCDEFGHIJK)}@mail.com&quot;,&#xd;
	  &quot;registryNumber&quot;: &quot;${__Random(00001000000000,00009999999999)}&quot;,&#xd;
	  &quot;registryLocationText&quot;: &quot;${fname}&quot;,&#xd;
	  &quot;maritalStatus&quot;: ${__Random(1,2)},&#xd;
	  &quot;files&quot;: [],&#xd;
	  &quot;hasVehicle&quot;: false,&#xd;
	  &quot;vehicles&quot;: [],&#xd;
	  &quot;last2MonthsFreshUSDIncome&quot;: ${__Random(1,1000)},&#xd;
	  &quot;last2MonthsUSDIncome&quot;: ${__Random(1,1000)},&#xd;
	  &quot;last2MonthsLBPIncome&quot;: ${__Random(100000,999999)},&#xd;
	  &quot;yearlyMoneyTransfers&quot;: ${__Random(100,999999)},&#xd;
	  &quot;moneyTransfersCurrency&quot;: ${__Random(1,4)},&#xd;
	  &quot;yearlyOtherIncome&quot;: ${__Random(1,1000)},&#xd;
	  &quot;otherIncomeCurrency&quot;: ${__Random(1,2)},&#xd;
	  &quot;employmentStatus&quot;: 1,&#xd;
	  &quot;workHours&quot;: 1,&#xd;
	  &quot;taxIdentificationNumber&quot;: &quot;${__Random(111111111,999999999)}&quot;,&#xd;
	  &quot;workSector&quot;: 2,&#xd;
	  &quot;workCategory&quot;: ${__Random(1,10)},&#xd;
	  &quot;otherWorkCategory&quot;: null,&#xd;
	  &quot;publicInstitutionType&quot;: null,&#xd;
	  &quot;publicInstitution&quot;: null,&#xd;
	  &quot;workPublicClass&quot;: null,&#xd;
	  &quot;hasBankAccount&quot;: false,&#xd;
	  &quot;bankAccounts&quot;: [],&#xd;
	  &quot;bankTotalUSDDeposits&quot;: null,&#xd;
	  &quot;bankTotalFreshUSDDeposits&quot;: null,&#xd;
	  &quot;bankTotalLBPDeposits&quot;: null,&#xd;
	  &quot;bankTotalOtherDeposits&quot;: null,&#xd;
	  &quot;otherDepositsCurrency&quot;: null,&#xd;
	  &quot;uuid&quot;: 4&#xd;
	  }&#xd;
  ],&#xd;
  &quot;familyMembersLiveTogether&quot;: true,&#xd;
  &quot;termsApproved&quot;: true,&#xd;
  &quot;submitted&quot;: true,&#xd;
  &quot;filledByHeadOfHouseHold&quot;: true,&#xd;
  &quot;filledByRepresentative&quot;: false,&#xd;
  &quot;representativeFatherName&quot;: null,&#xd;
  &quot;representativeFirstName&quot;: null,&#xd;
  &quot;representativeLastName&quot;: null,&#xd;
  &quot;representativeMobileNumber&quot;: null,&#xd;
  &quot;representativeFamilyRelation&quot;: null,&#xd;
  &quot;landlineNumber&quot;: &quot;01${__Random(100000,999999)}&quot;,&#xd;
  &quot;familyMembersNumber&quot;: 1,&#xd;
  &quot;locality&quot;: 1034,&#xd;
  &quot;mouhafaza&quot;: 7,&#xd;
  &quot;kadaa&quot;: 25,&#xd;
  &quot;town&quot;: 708,&#xd;
  &quot;neighborhood&quot;: &quot;${fname}&quot;,&#xd;
  &quot;street&quot;: &quot;${fname}&quot;,&#xd;
  &quot;ownership&quot;: &quot;${fname}&quot;,&#xd;
  &quot;floor&quot;: &quot;${fname}&quot;,&#xd;
  &quot;apartment&quot;: &quot;${fname}&quot;,&#xd;
  &quot;nearestLocation&quot;: &quot;${fname}&quot;,&#xd;
  &quot;domesticWorkersNumber&quot;: 0,&#xd;
  &quot;hasDisabledMember&quot;: false,&#xd;
  &quot;accommodations&quot;: [&#xd;
    {&#xd;
      &quot;id&quot;: ${accommodation_id},&#xd;
      &quot;type&quot;: 1,&#xd;
      &quot;property&quot;: 1,&#xd;
      &quot;area&quot;: 1,&#xd;
      &quot;roomsNumber&quot;: ${__Random(1,4)},&#xd;
      &quot;rentCurrency&quot;: null,&#xd;
      &quot;rent&quot;: null,&#xd;
      &quot;bathRoomsNumber&quot;: ${__Random(1,2)}&#xd;
    }&#xd;
  ],&#xd;
  &quot;benefitFromNPTP&quot;: false,&#xd;
  &quot;benefitFromWFP&quot;: false&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/impactservices/impact_aid_card/aid_card/v1/</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="save form" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-Authorization" elementType="Header">
                  <stringProp name="Header.name">X-Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 ok" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login Admin" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;username&quot;: &quot;${usernameAdmin}&quot;,&#xd;
  &quot;password&quot;: &quot;${password}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/impactservices/impact_aid_card_auth/auth/v2/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="admin_access_token" enabled="false">
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">admin_access_token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.accessToken</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 Ok" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login Admin OTP" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;username&quot;: &quot;${usernameAdmin}&quot;,&#xd;
  &quot;code&quot;: &quot;4444&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/impactservices/impact_aid_card_auth/auth/v2/login/otp</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="admin_access_token" enabled="true">
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">admin_access_token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.accessToken</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 Ok" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SET Eligible" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/impactservices/impact_aid_card/aid_card/v1/aid_card_audit/application/${user_id}/status/ELIGIBLE</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Get user" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-Authorization" elementType="Header">
                  <stringProp name="Header.name">X-Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${admin_access_token}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="assign Batch" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;kadaa&quot;: 25,&#xd;
  &quot;town&quot;: 708,&#xd;
  &quot;applicationCount&quot;: &quot;50&quot;,&#xd;
  &quot;supervisorUser&quot;: 6699491&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/impactservices/impact_aid_card/aid_card/v1/aid_card_audit/application/assignbatch</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="get" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-Authorization" elementType="Header">
                  <stringProp name="Header.name">x-authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${admin_access_token}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 Ok" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login Supervisor" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;username&quot;: &quot;nancy@gmai.com&quot;,&#xd;
  &quot;password&quot;: &quot;${password}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/impactservices/impact_aid_card_auth/auth/v2/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="supervisor_access_token" enabled="false">
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">supervisor_access_token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.accessToken</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 Ok" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login Supervisor OTP" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;username&quot;: &quot;nancy@gmai.com&quot;,&#xd;
  &quot;code&quot;: &quot;4444&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/impactservices/impact_aid_card_auth/auth/v2/login/otp</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="supervisor_access_token" enabled="true">
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">supervisor_access_token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.accessToken</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 Ok" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Schedule Visit D" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;visitDate&quot;: &quot;${__Random(2,30)}/${__Random(10,12)}/2022&quot;, &#xd;
  &quot;aidCardApplication&quot;: {&#xd;
    &quot;id&quot;: ${user_id}&#xd;
  },&#xd;
  &quot;surveyorUser&quot;: {&#xd;
    &quot;id&quot;: 6699493&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/impactservices/impact_aid_card/aid_card/v1/aid_card_audit/application/${user_id}/schedule</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 Ok" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="get" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-Authorization" elementType="Header">
                  <stringProp name="Header.name">x-authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${supervisor_access_token}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">accept-encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="get" enabled="false">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-Authorization" elementType="Header">
                  <stringProp name="Header.name">x-authorization</stringProp>
                  <stringProp name="Header.value">Bearer eyJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJhaWRfY2FyZCIsInN1YiI6InRlc3RAdGVzdC5jb20iLCJBdXRob3JpdGllcyI6WyJST0xFX1NVUEVSVklTT1IiXSwiSWQiOjY0NTM3MjksImV4cCI6MTY0NjQ3OTA4Nn0.qDNkuwIp-k8rpUqNQtO_AqnEpBm1pgUR-ncc4zr6YNs</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="Synchronizing Timer" enabled="true">
              <intProp name="groupSize">5</intProp>
              <longProp name="timeoutInMs">2000</longProp>
            </SyncTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login Surveyor ESSN" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;username&quot;: &quot;nanaenu@gmail.com&quot;,&#xd;
  &quot;password&quot;: &quot;${password}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/impactservices/impact_aid_card_auth/auth/v2/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="surv_access_token" enabled="true">
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">surv_access_token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.accessToken</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 Ok" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="Synchronizing Timer" enabled="true">
              <intProp name="groupSize">5</intProp>
              <longProp name="timeoutInMs">2500</longProp>
            </SyncTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="OTP Login Surveyor ESSN" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;username&quot;: &quot;nanaenu@gmail.com&quot;,&#xd;
  &quot;code&quot;: &quot;4444&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/impactservices/impact_aid_card_auth/auth/v2/login/otp</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="surv_access_token" enabled="true">
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">surv_access_token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.accessToken</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 Ok" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="Synchronizing Timer" enabled="true">
              <intProp name="groupSize">5</intProp>
              <longProp name="timeoutInMs">2500</longProp>
            </SyncTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT Audit Submitted" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: ${user_id},&#xd;
  &quot;persons&quot;: [&#xd;
    {&#xd;
      &quot;id&quot;: ${person_id},&#xd;
      &quot;uuid&quot;: 1,&#xd;
      &quot;firstName&quot;: &quot;${fname}&quot;,&#xd;
      &quot;lastName&quot;: &quot;${lname}&quot;,&#xd;
      &quot;fatherName&quot;: &quot;${fname}&quot;,&#xd;
      &quot;motherFirstName&quot;: &quot;${fname}&quot;,&#xd;
      &quot;motherLastName&quot;: &quot;${fname}&quot;,&#xd;
      &quot;dateOfBirth&quot;: &quot;7/${__Random(1,12)}/${__Random(1950,2010)}&quot;,&#xd;
      &quot;countryOfBirth&quot;: 1,&#xd;
      &quot;gender&quot;: ${__Random(1,2)},&#xd;
      &quot;placeOfBirthText&quot;: &quot;${fname}&quot;,&#xd;
      &quot;noIdentityCard&quot;: false,&#xd;
      &quot;idNumber&quot;: &quot;${__Random(111111111111,999999999999)}&quot;,&#xd;
      &quot;passportNumber&quot;: &quot;${__Random(000000000000,999999999999)}&quot;,&#xd;
      &quot;sixMonthResidency&quot;: false,&#xd;
      &quot;mobileNumber&quot;: &quot;${lebanesePhone}${__Random(100000,999999)}&quot;,&#xd;
      &quot;email&quot;: &quot;${username}@mail.com&quot;,&#xd;
      &quot;registryNumber&quot;: &quot;${__Random(00001000000000,00009999999999)}&quot;,&#xd;
      &quot;registryLocationText&quot;: &quot;${fname}&quot;,&#xd;
      &quot;maritalStatus&quot;: 1,&#xd;
      &quot;hasVehicle&quot;: true,&#xd;
      &quot;vehicles&quot;: [&#xd;
       {&#xd;
          &quot;id&quot;: ${vehicle_id},&#xd;
          &quot;plateNumber&quot;: &quot;${__Random(100000,999999)}&quot;,&#xd;
          &quot;vehicleCategory&quot;: 1,&#xd;
          &quot;registrationYear&quot;: &quot;${__Random(2000,2022)}&quot;,&#xd;
          &quot;manufacturingYear&quot;: &quot;${__Random(1950,1999)}&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;last2MonthsFreshUSDIncome&quot;: ${__Random(1,100)},&#xd;
      &quot;last2MonthsUSDIncome&quot;: ${__Random(1000,1999)},&#xd;
      &quot;last2MonthsLBPIncome&quot;: ${__Random(10000,90000)},&#xd;
      &quot;yearlyMoneyTransfers&quot;: ${__Random(100,999)},&#xd;
      &quot;moneyTransfersCurrency&quot;: 4,&#xd;
      &quot;yearlyOtherIncome&quot;: ${__Random(10000,99999)},&#xd;
      &quot;otherIncomeCurrency&quot;: 2,&#xd;
      &quot;employmentStatus&quot;: 2,&#xd;
      &quot;workHours&quot;: null,&#xd;
      &quot;publicInstitutionType&quot;: null,&#xd;
      &quot;publicInstitution&quot;: null,&#xd;
      &quot;workPublicClass&quot;: null,&#xd;
      &quot;taxIdentificationNumber&quot;: &quot;${__Random(10000000,99999999)}&quot;,&#xd;
      &quot;workSector&quot;: null,&#xd;
      &quot;workCategory&quot;: null,&#xd;
      &quot;otherWorkCategory&quot;: null,&#xd;
      &quot;hasBankAccount&quot;: false,&#xd;
      &quot;bankAccounts&quot;: [],&#xd;
      &quot;bankTotalUSDDeposits&quot;: null,&#xd;
      &quot;bankTotalFreshUSDDeposits&quot;: null,&#xd;
      &quot;bankTotalLBPDeposits&quot;: null,&#xd;
      &quot;bankTotalOtherDeposits&quot;: null,&#xd;
      &quot;otherDepositsCurrency&quot;: null,&#xd;
      &quot;headOfHouseHold&quot;: true,&#xd;
      &quot;files&quot;: []&#xd;
    },&#xd;
    {&#xd;
	  &quot;id&quot;: ${person_id_2},&#xd;
	  &quot;familyRelation&quot;: ${__Random(1,5)},&#xd;
	  &quot;otherFamilyRelation&quot;: null,&#xd;
	  &quot;noIdentityCard&quot;: false,&#xd;
	  &quot;idNumber&quot;: &quot;${__Random(111111111111,999999999999)}&quot;,&#xd;
	  &quot;passportNumber&quot;: &quot;${__Random(00001000000000,00009999999999)}&quot;,&#xd;
	  &quot;firstName&quot;: &quot;${fname}&quot;,&#xd;
	  &quot;lastName&quot;: &quot;${lname}&quot;,&#xd;
	  &quot;fatherName&quot;: &quot;${fname}&quot;,&#xd;
	  &quot;motherFirstName&quot;: &quot;${fname}&quot;,&#xd;
	  &quot;motherLastName&quot;: &quot;${fname}&quot;,&#xd;
	  &quot;dateOfBirth&quot;: &quot;7/${__Random(1,12)}/${__Random(1950,2010)}&quot;,&#xd;
	  &quot;countryOfBirth&quot;: 1,&#xd;
	  &quot;gender&quot;: ${__Random(1,2)},&#xd;
	  &quot;placeOfBirthText&quot;: &quot;${fname}&quot;,&#xd;
	  &quot;sixMonthResidency&quot;: false,&#xd;
	  &quot;mobileNumber&quot;: &quot;${lebanesePhone}${__Random(100000,999999)}&quot;,&#xd;
	  &quot;email&quot;: &quot;${__RandomString(7,ABCDEFGHIJK)}@mail.com&quot;,&#xd;
	  &quot;registryNumber&quot;: &quot;${__Random(00001000000000,00009999999999)}&quot;,&#xd;
	  &quot;registryLocationText&quot;: &quot;${fname}&quot;,&#xd;
	  &quot;maritalStatus&quot;: ${__Random(1,2)},&#xd;
	  &quot;files&quot;: [],&#xd;
	  &quot;hasVehicle&quot;: false,&#xd;
	  &quot;vehicles&quot;: [],&#xd;
	  &quot;last2MonthsFreshUSDIncome&quot;: ${__Random(1,1000)},&#xd;
	  &quot;last2MonthsUSDIncome&quot;: ${__Random(1,1000)},&#xd;
	  &quot;last2MonthsLBPIncome&quot;: ${__Random(100000,999999)},&#xd;
	  &quot;yearlyMoneyTransfers&quot;: ${__Random(100,999999)},&#xd;
	  &quot;moneyTransfersCurrency&quot;: ${__Random(1,4)},&#xd;
	  &quot;yearlyOtherIncome&quot;: ${__Random(1,1000)},&#xd;
	  &quot;otherIncomeCurrency&quot;: ${__Random(1,2)},&#xd;
	  &quot;employmentStatus&quot;: 1,&#xd;
	  &quot;workHours&quot;: 1,&#xd;
	  &quot;taxIdentificationNumber&quot;: &quot;${__Random(111111111,999999999)}&quot;,&#xd;
	  &quot;workSector&quot;: 2,&#xd;
	  &quot;workCategory&quot;: ${__Random(1,10)},&#xd;
	  &quot;otherWorkCategory&quot;: null,&#xd;
	  &quot;publicInstitutionType&quot;: null,&#xd;
	  &quot;publicInstitution&quot;: null,&#xd;
	  &quot;workPublicClass&quot;: null,&#xd;
	  &quot;hasBankAccount&quot;: false,&#xd;
	  &quot;bankAccounts&quot;: [],&#xd;
	  &quot;bankTotalUSDDeposits&quot;: null,&#xd;
	  &quot;bankTotalFreshUSDDeposits&quot;: null,&#xd;
	  &quot;bankTotalLBPDeposits&quot;: null,&#xd;
	  &quot;bankTotalOtherDeposits&quot;: null,&#xd;
	  &quot;otherDepositsCurrency&quot;: null,&#xd;
	  &quot;uuid&quot;: 2&#xd;
   },&#xd;
    {&#xd;
	  &quot;id&quot;: ${person_id_3},&#xd;
	  &quot;familyRelation&quot;: ${__Random(1,5)},&#xd;
	  &quot;otherFamilyRelation&quot;: null,&#xd;
	  &quot;noIdentityCard&quot;: false,&#xd;
	  &quot;idNumber&quot;: &quot;${__Random(111111111111,999999999999)}&quot;,&#xd;
	  &quot;passportNumber&quot;: &quot;${__Random(00001000000000,00009999999999)}&quot;,&#xd;
	  &quot;firstName&quot;: &quot;${fname}&quot;,&#xd;
	  &quot;lastName&quot;: &quot;${lname}&quot;,&#xd;
	  &quot;fatherName&quot;: &quot;${fname}&quot;,&#xd;
	  &quot;motherFirstName&quot;: &quot;${fname}&quot;,&#xd;
	  &quot;motherLastName&quot;: &quot;${fname}&quot;,&#xd;
	  &quot;dateOfBirth&quot;: &quot;7/${__Random(1,12)}/${__Random(1950,2010)}&quot;,&#xd;
	  &quot;countryOfBirth&quot;: 1,&#xd;
	  &quot;gender&quot;: ${__Random(1,2)},&#xd;
	  &quot;placeOfBirthText&quot;: &quot;${fname}&quot;,&#xd;
	  &quot;sixMonthResidency&quot;: false,&#xd;
	  &quot;mobileNumber&quot;: &quot;${lebanesePhone}${__Random(100000,999999)}&quot;,&#xd;
	  &quot;email&quot;: &quot;${__RandomString(7,ABCDEFGHIJK)}@mail.com&quot;,&#xd;
	  &quot;registryNumber&quot;: &quot;${__Random(00001000000000,00009999999999)}&quot;,&#xd;
	  &quot;registryLocationText&quot;: &quot;${fname}&quot;,&#xd;
	  &quot;maritalStatus&quot;: ${__Random(1,2)},&#xd;
	  &quot;files&quot;: [],&#xd;
	  &quot;hasVehicle&quot;: false,&#xd;
	  &quot;vehicles&quot;: [],&#xd;
	  &quot;last2MonthsFreshUSDIncome&quot;: ${__Random(1,1000)},&#xd;
	  &quot;last2MonthsUSDIncome&quot;: ${__Random(1,1000)},&#xd;
	  &quot;last2MonthsLBPIncome&quot;: ${__Random(100000,999999)},&#xd;
	  &quot;yearlyMoneyTransfers&quot;: ${__Random(100,999999)},&#xd;
	  &quot;moneyTransfersCurrency&quot;: ${__Random(1,4)},&#xd;
	  &quot;yearlyOtherIncome&quot;: ${__Random(1,1000)},&#xd;
	  &quot;otherIncomeCurrency&quot;: ${__Random(1,2)},&#xd;
	  &quot;employmentStatus&quot;: 1,&#xd;
	  &quot;workHours&quot;: 1,&#xd;
	  &quot;taxIdentificationNumber&quot;: &quot;${__Random(111111111,999999999)}&quot;,&#xd;
	  &quot;workSector&quot;: 2,&#xd;
	  &quot;workCategory&quot;: ${__Random(1,10)},&#xd;
	  &quot;otherWorkCategory&quot;: null,&#xd;
	  &quot;publicInstitutionType&quot;: null,&#xd;
	  &quot;publicInstitution&quot;: null,&#xd;
	  &quot;workPublicClass&quot;: null,&#xd;
	  &quot;hasBankAccount&quot;: false,&#xd;
	  &quot;bankAccounts&quot;: [],&#xd;
	  &quot;bankTotalUSDDeposits&quot;: null,&#xd;
	  &quot;bankTotalFreshUSDDeposits&quot;: null,&#xd;
	  &quot;bankTotalLBPDeposits&quot;: null,&#xd;
	  &quot;bankTotalOtherDeposits&quot;: null,&#xd;
	  &quot;otherDepositsCurrency&quot;: null,&#xd;
	  &quot;uuid&quot;: 3&#xd;
	  },&#xd;
	  {&#xd;
	  &quot;id&quot;: ${person_id_4},&#xd;
	  &quot;familyRelation&quot;: ${__Random(1,5)},&#xd;
	  &quot;otherFamilyRelation&quot;: null,&#xd;
	  &quot;noIdentityCard&quot;: false,&#xd;
	  &quot;idNumber&quot;: &quot;${__Random(111111111111,999999999999)}&quot;,&#xd;
	  &quot;passportNumber&quot;: &quot;${__Random(00001000000000,00009999999999)}&quot;,&#xd;
	  &quot;firstName&quot;: &quot;${fname}&quot;,&#xd;
	  &quot;lastName&quot;: &quot;${lname}&quot;,&#xd;
	  &quot;fatherName&quot;: &quot;${fname}&quot;,&#xd;
	  &quot;motherFirstName&quot;: &quot;${fname}&quot;,&#xd;
	  &quot;motherLastName&quot;: &quot;${fname}&quot;,&#xd;
	  &quot;dateOfBirth&quot;: &quot;7/${__Random(1,12)}/${__Random(1950,2010)}&quot;,&#xd;
	  &quot;countryOfBirth&quot;: 1,&#xd;
	  &quot;gender&quot;: ${__Random(1,2)},&#xd;
	  &quot;placeOfBirthText&quot;: &quot;${fname}&quot;,&#xd;
	  &quot;sixMonthResidency&quot;: false,&#xd;
	  &quot;mobileNumber&quot;: &quot;${lebanesePhone}${__Random(100000,999999)}&quot;,&#xd;
	  &quot;email&quot;: &quot;${__RandomString(7,ABCDEFGHIJK)}@mail.com&quot;,&#xd;
	  &quot;registryNumber&quot;: &quot;${__Random(00001000000000,00009999999999)}&quot;,&#xd;
	  &quot;registryLocationText&quot;: &quot;${fname}&quot;,&#xd;
	  &quot;maritalStatus&quot;: ${__Random(1,2)},&#xd;
	  &quot;files&quot;: [],&#xd;
	  &quot;hasVehicle&quot;: false,&#xd;
	  &quot;vehicles&quot;: [],&#xd;
	  &quot;last2MonthsFreshUSDIncome&quot;: ${__Random(1,1000)},&#xd;
	  &quot;last2MonthsUSDIncome&quot;: ${__Random(1,1000)},&#xd;
	  &quot;last2MonthsLBPIncome&quot;: ${__Random(100000,999999)},&#xd;
	  &quot;yearlyMoneyTransfers&quot;: ${__Random(100,999999)},&#xd;
	  &quot;moneyTransfersCurrency&quot;: ${__Random(1,4)},&#xd;
	  &quot;yearlyOtherIncome&quot;: ${__Random(1,1000)},&#xd;
	  &quot;otherIncomeCurrency&quot;: ${__Random(1,2)},&#xd;
	  &quot;employmentStatus&quot;: 1,&#xd;
	  &quot;workHours&quot;: 1,&#xd;
	  &quot;taxIdentificationNumber&quot;: &quot;${__Random(111111111,999999999)}&quot;,&#xd;
	  &quot;workSector&quot;: 2,&#xd;
	  &quot;workCategory&quot;: ${__Random(1,10)},&#xd;
	  &quot;otherWorkCategory&quot;: null,&#xd;
	  &quot;publicInstitutionType&quot;: null,&#xd;
	  &quot;publicInstitution&quot;: null,&#xd;
	  &quot;workPublicClass&quot;: null,&#xd;
	  &quot;hasBankAccount&quot;: false,&#xd;
	  &quot;bankAccounts&quot;: [],&#xd;
	  &quot;bankTotalUSDDeposits&quot;: null,&#xd;
	  &quot;bankTotalFreshUSDDeposits&quot;: null,&#xd;
	  &quot;bankTotalLBPDeposits&quot;: null,&#xd;
	  &quot;bankTotalOtherDeposits&quot;: null,&#xd;
	  &quot;otherDepositsCurrency&quot;: null,&#xd;
	  &quot;uuid&quot;: 4&#xd;
	  }&#xd;
  ],&#xd;
  &quot;familyMembersLiveTogether&quot;: true,&#xd;
  &quot;termsApproved&quot;: true,&#xd;
  &quot;submitted&quot;: true,&#xd;
  &quot;filledByHeadOfHouseHold&quot;: true,&#xd;
  &quot;filledByRepresentative&quot;: false,&#xd;
  &quot;representativeFatherName&quot;: null,&#xd;
  &quot;representativeFirstName&quot;: null,&#xd;
  &quot;representativeLastName&quot;: null,&#xd;
  &quot;representativeMobileNumber&quot;: null,&#xd;
  &quot;representativeFamilyRelation&quot;: null,&#xd;
  &quot;landlineNumber&quot;: &quot;01${__Random(100000,999999)}&quot;,&#xd;
  &quot;familyMembersNumber&quot;: 1,&#xd;
  &quot;locality&quot;: 1034,&#xd;
  &quot;mouhafaza&quot;: 7,&#xd;
  &quot;kadaa&quot;: 25,&#xd;
  &quot;town&quot;: 708,&#xd;
  &quot;neighborhood&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
  &quot;street&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
  &quot;ownership&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
  &quot;floor&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
  &quot;apartment&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
  &quot;nearestLocation&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
  &quot;domesticWorkersNumber&quot;: 0,&#xd;
  &quot;hasDisabledMember&quot;: false,&#xd;
  &quot;accommodations&quot;: [&#xd;
    {&#xd;
      &quot;id&quot;: ${accommodation_id},&#xd;
      &quot;type&quot;: 1,&#xd;
      &quot;property&quot;: 1,&#xd;
      &quot;area&quot;: 1,&#xd;
      &quot;roomsNumber&quot;: ${__Random(1,4)},&#xd;
      &quot;rentCurrency&quot;: null,&#xd;
      &quot;rent&quot;: null,&#xd;
      &quot;bathRoomsNumber&quot;: ${__Random(1,2)}&#xd;
    }&#xd;
  ],&#xd;
  &quot;aidCardApplicationStatus&quot;: 8,&#xd;
  &quot;benefitFromNPTP&quot;: false,&#xd;
  &quot;benefitFromWFP&quot;: false&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/impactservices/impact_aid_card/aid_card/v1/aid_card_audit/application/${user_id}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="get" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-Authorization" elementType="Header">
                  <stringProp name="Header.name">x-authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${surv_access_token}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">accept-encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="Synchronizing Timer" enabled="true">
              <intProp name="groupSize">5</intProp>
              <longProp name="timeoutInMs">2000</longProp>
            </SyncTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SEND Audit" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: ${user_id},&#xd;
  &quot;applicationStatus&quot;: {&#xd;
    &quot;id&quot;: 9&#xd;
  },&#xd;
  &quot;submitted&quot;: true,&#xd;
  &quot;persons&quot;: [&#xd;
    {&#xd;
      &quot;id&quot;: ${person_id},&#xd;
      &quot;uuid&quot;: 1,&#xd;
      &quot;firstName&quot;: &quot;${fname}&quot;,&#xd;
      &quot;lastName&quot;: &quot;${lname}&quot;,&#xd;
      &quot;fatherName&quot;: &quot;${fname}&quot;,&#xd;
      &quot;motherFirstName&quot;: &quot;${fname}&quot;,&#xd;
      &quot;motherLastName&quot;: &quot;${fname}&quot;,&#xd;
      &quot;dateOfBirth&quot;: &quot;7/${__Random(1,12)}/${__Random(1950,2010)}&quot;,&#xd;
      &quot;countryOfBirth&quot;: 1,&#xd;
      &quot;gender&quot;: ${__Random(1,2)},&#xd;
      &quot;placeOfBirthText&quot;: &quot;${fname}&quot;,&#xd;
      &quot;noIdentityCard&quot;: false,&#xd;
      &quot;idNumber&quot;: &quot;${__Random(111111111111,999999999999)}&quot;,&#xd;
      &quot;passportNumber&quot;: &quot;${__Random(000000000000,999999999999)}&quot;,&#xd;
      &quot;sixMonthResidency&quot;: false,&#xd;
      &quot;mobileNumber&quot;: &quot;${lebanesePhone}${__Random(100000,999999)}&quot;,&#xd;
      &quot;email&quot;: &quot;${username}@mail.com&quot;,&#xd;
      &quot;registryNumber&quot;: &quot;${__Random(00001000000000,00009999999999)}&quot;,&#xd;
      &quot;registryLocationText&quot;: &quot;${fname}&quot;,&#xd;
      &quot;maritalStatus&quot;: 1,&#xd;
      &quot;hasVehicle&quot;: true,&#xd;
      &quot;vehicles&quot;: [&#xd;
       {&#xd;
          &quot;id&quot;: ${vehicle_id},&#xd;
          &quot;plateNumber&quot;: &quot;${__Random(100000,999999)}&quot;,&#xd;
          &quot;vehicleCategory&quot;: 1,&#xd;
           &quot;registrationYear&quot;: &quot;${__Random(2000,2022)}&quot;,&#xd;
          &quot;manufacturingYear&quot;: &quot;${__Random(1950,1999)}&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;last2MonthsFreshUSDIncome&quot;: ${__Random(1,100)},&#xd;
      &quot;last2MonthsUSDIncome&quot;: ${__Random(1000,1999)},&#xd;
      &quot;last2MonthsLBPIncome&quot;: ${__Random(10000,90000)},&#xd;
      &quot;yearlyMoneyTransfers&quot;: ${__Random(100,999)},&#xd;
      &quot;moneyTransfersCurrency&quot;: 4,&#xd;
      &quot;yearlyOtherIncome&quot;: ${__Random(10000,99999)},&#xd;
      &quot;otherIncomeCurrency&quot;: 2,&#xd;
      &quot;employmentStatus&quot;: 2,&#xd;
      &quot;workHours&quot;: null,&#xd;
      &quot;publicInstitutionType&quot;: null,&#xd;
      &quot;publicInstitution&quot;: null,&#xd;
      &quot;workPublicClass&quot;: null,&#xd;
      &quot;taxIdentificationNumber&quot;: &quot;${__Random(10000000,99999999)}&quot;,&#xd;
      &quot;workSector&quot;: null,&#xd;
      &quot;workCategory&quot;: null,&#xd;
      &quot;otherWorkCategory&quot;: null,&#xd;
      &quot;hasBankAccount&quot;: false,&#xd;
      &quot;bankAccounts&quot;: [],&#xd;
      &quot;bankTotalUSDDeposits&quot;: null,&#xd;
      &quot;bankTotalFreshUSDDeposits&quot;: null,&#xd;
      &quot;bankTotalLBPDeposits&quot;: null,&#xd;
      &quot;bankTotalOtherDeposits&quot;: null,&#xd;
      &quot;otherDepositsCurrency&quot;: null,&#xd;
      &quot;headOfHouseHold&quot;: true,&#xd;
      &quot;files&quot;: []&#xd;
    },&#xd;
    {&#xd;
	  &quot;id&quot;: ${person_id_2},&#xd;
	  &quot;familyRelation&quot;: ${__Random(1,5)},&#xd;
	  &quot;otherFamilyRelation&quot;: null,&#xd;
	  &quot;noIdentityCard&quot;: false,&#xd;
	  &quot;idNumber&quot;: &quot;${__Random(111111111111,999999999999)}&quot;,&#xd;
	  &quot;passportNumber&quot;: &quot;${__Random(00001000000000,00009999999999)}&quot;,&#xd;
	  &quot;firstName&quot;: &quot;${fname}&quot;,&#xd;
	  &quot;lastName&quot;: &quot;${lname}&quot;,&#xd;
	  &quot;fatherName&quot;: &quot;${fname}&quot;,&#xd;
	  &quot;motherFirstName&quot;: &quot;${fname}&quot;,&#xd;
	  &quot;motherLastName&quot;: &quot;${fname}&quot;,&#xd;
	  &quot;dateOfBirth&quot;: &quot;7/${__Random(1,12)}/${__Random(1950,2010)}&quot;,&#xd;
	  &quot;countryOfBirth&quot;: 1,&#xd;
	  &quot;gender&quot;: ${__Random(1,2)},&#xd;
	  &quot;placeOfBirthText&quot;: &quot;${fname}&quot;,&#xd;
	  &quot;sixMonthResidency&quot;: false,&#xd;
	  &quot;mobileNumber&quot;: &quot;${lebanesePhone}${__Random(100000,999999)}&quot;,&#xd;
	  &quot;email&quot;: &quot;${__RandomString(7,ABCDEFGHIJK)}@mail.com&quot;,&#xd;
	  &quot;registryNumber&quot;: &quot;${__Random(00001000000000,00009999999999)}&quot;,&#xd;
	  &quot;registryLocationText&quot;: &quot;${fname}&quot;,&#xd;
	  &quot;maritalStatus&quot;: ${__Random(1,2)},&#xd;
	  &quot;files&quot;: [],&#xd;
	  &quot;hasVehicle&quot;: false,&#xd;
	  &quot;vehicles&quot;: [],&#xd;
	  &quot;last2MonthsFreshUSDIncome&quot;: ${__Random(1,1000)},&#xd;
	  &quot;last2MonthsUSDIncome&quot;: ${__Random(1,1000)},&#xd;
	  &quot;last2MonthsLBPIncome&quot;: ${__Random(100000,999999)},&#xd;
	  &quot;yearlyMoneyTransfers&quot;: ${__Random(100,999999)},&#xd;
	  &quot;moneyTransfersCurrency&quot;: ${__Random(1,4)},&#xd;
	  &quot;yearlyOtherIncome&quot;: ${__Random(1,1000)},&#xd;
	  &quot;otherIncomeCurrency&quot;: ${__Random(1,2)},&#xd;
	  &quot;employmentStatus&quot;: 1,&#xd;
	  &quot;workHours&quot;: 1,&#xd;
	  &quot;taxIdentificationNumber&quot;: &quot;${__Random(111111111,999999999)}&quot;,&#xd;
	  &quot;workSector&quot;: 2,&#xd;
	  &quot;workCategory&quot;: ${__Random(1,10)},&#xd;
	  &quot;otherWorkCategory&quot;: null,&#xd;
	  &quot;publicInstitutionType&quot;: null,&#xd;
	  &quot;publicInstitution&quot;: null,&#xd;
	  &quot;workPublicClass&quot;: null,&#xd;
	  &quot;hasBankAccount&quot;: false,&#xd;
	  &quot;bankAccounts&quot;: [],&#xd;
	  &quot;bankTotalUSDDeposits&quot;: null,&#xd;
	  &quot;bankTotalFreshUSDDeposits&quot;: null,&#xd;
	  &quot;bankTotalLBPDeposits&quot;: null,&#xd;
	  &quot;bankTotalOtherDeposits&quot;: null,&#xd;
	  &quot;otherDepositsCurrency&quot;: null,&#xd;
	  &quot;uuid&quot;: 2&#xd;
   },&#xd;
    {&#xd;
	  &quot;id&quot;: ${person_id_3},&#xd;
	  &quot;familyRelation&quot;: ${__Random(1,5)},&#xd;
	  &quot;otherFamilyRelation&quot;: null,&#xd;
	  &quot;noIdentityCard&quot;: false,&#xd;
	  &quot;idNumber&quot;: &quot;${__Random(111111111111,999999999999)}&quot;,&#xd;
	  &quot;passportNumber&quot;: &quot;${__Random(00001000000000,00009999999999)}&quot;,&#xd;
	  &quot;firstName&quot;: &quot;${fname}&quot;,&#xd;
	  &quot;lastName&quot;: &quot;${lname}&quot;,&#xd;
	  &quot;fatherName&quot;: &quot;${fname}&quot;,&#xd;
	  &quot;motherFirstName&quot;: &quot;${fname}&quot;,&#xd;
	  &quot;motherLastName&quot;: &quot;${fname}&quot;,&#xd;
	  &quot;dateOfBirth&quot;: &quot;7/${__Random(1,12)}/${__Random(1950,2010)}&quot;,&#xd;
	  &quot;countryOfBirth&quot;: 1,&#xd;
	  &quot;gender&quot;: ${__Random(1,2)},&#xd;
	  &quot;placeOfBirthText&quot;: &quot;${fname}&quot;,&#xd;
	  &quot;sixMonthResidency&quot;: false,&#xd;
	  &quot;mobileNumber&quot;: &quot;${lebanesePhone}${__Random(100000,999999)}&quot;,&#xd;
	  &quot;email&quot;: &quot;${__RandomString(7,ABCDEFGHIJK)}@mail.com&quot;,&#xd;
	  &quot;registryNumber&quot;: &quot;${__Random(00001000000000,00009999999999)}&quot;,&#xd;
	  &quot;registryLocationText&quot;: &quot;${fname}&quot;,&#xd;
	  &quot;maritalStatus&quot;: ${__Random(1,2)},&#xd;
	  &quot;files&quot;: [],&#xd;
	  &quot;hasVehicle&quot;: false,&#xd;
	  &quot;vehicles&quot;: [],&#xd;
	  &quot;last2MonthsFreshUSDIncome&quot;: ${__Random(1,1000)},&#xd;
	  &quot;last2MonthsUSDIncome&quot;: ${__Random(1,1000)},&#xd;
	  &quot;last2MonthsLBPIncome&quot;: ${__Random(100000,999999)},&#xd;
	  &quot;yearlyMoneyTransfers&quot;: ${__Random(100,999999)},&#xd;
	  &quot;moneyTransfersCurrency&quot;: ${__Random(1,4)},&#xd;
	  &quot;yearlyOtherIncome&quot;: ${__Random(1,1000)},&#xd;
	  &quot;otherIncomeCurrency&quot;: ${__Random(1,2)},&#xd;
	  &quot;employmentStatus&quot;: 1,&#xd;
	  &quot;workHours&quot;: 1,&#xd;
	  &quot;taxIdentificationNumber&quot;: &quot;${__Random(111111111,999999999)}&quot;,&#xd;
	  &quot;workSector&quot;: 2,&#xd;
	  &quot;workCategory&quot;: ${__Random(1,10)},&#xd;
	  &quot;otherWorkCategory&quot;: null,&#xd;
	  &quot;publicInstitutionType&quot;: null,&#xd;
	  &quot;publicInstitution&quot;: null,&#xd;
	  &quot;workPublicClass&quot;: null,&#xd;
	  &quot;hasBankAccount&quot;: false,&#xd;
	  &quot;bankAccounts&quot;: [],&#xd;
	  &quot;bankTotalUSDDeposits&quot;: null,&#xd;
	  &quot;bankTotalFreshUSDDeposits&quot;: null,&#xd;
	  &quot;bankTotalLBPDeposits&quot;: null,&#xd;
	  &quot;bankTotalOtherDeposits&quot;: null,&#xd;
	  &quot;otherDepositsCurrency&quot;: null,&#xd;
	  &quot;uuid&quot;: 3&#xd;
	  },&#xd;
	  {&#xd;
	  &quot;id&quot;: ${person_id_4},&#xd;
	  &quot;familyRelation&quot;: ${__Random(1,5)},&#xd;
	  &quot;otherFamilyRelation&quot;: null,&#xd;
	  &quot;noIdentityCard&quot;: false,&#xd;
	  &quot;idNumber&quot;: &quot;${__Random(111111111111,999999999999)}&quot;,&#xd;
	  &quot;passportNumber&quot;: &quot;${__Random(00001000000000,00009999999999)}&quot;,&#xd;
	  &quot;firstName&quot;: &quot;${fname}&quot;,&#xd;
	  &quot;lastName&quot;: &quot;${lname}&quot;,&#xd;
	  &quot;fatherName&quot;: &quot;${fname}&quot;,&#xd;
	  &quot;motherFirstName&quot;: &quot;${fname}&quot;,&#xd;
	  &quot;motherLastName&quot;: &quot;${fname}&quot;,&#xd;
	  &quot;dateOfBirth&quot;: &quot;7/${__Random(1,12)}/${__Random(1950,2010)}&quot;,&#xd;
	  &quot;countryOfBirth&quot;: 1,&#xd;
	  &quot;gender&quot;: ${__Random(1,2)},&#xd;
	  &quot;placeOfBirthText&quot;: &quot;${fname}&quot;,&#xd;
	  &quot;sixMonthResidency&quot;: false,&#xd;
	  &quot;mobileNumber&quot;: &quot;${lebanesePhone}${__Random(100000,999999)}&quot;,&#xd;
	  &quot;email&quot;: &quot;${__RandomString(7,ABCDEFGHIJK)}@mail.com&quot;,&#xd;
	  &quot;registryNumber&quot;: &quot;${__Random(00001000000000,00009999999999)}&quot;,&#xd;
	  &quot;registryLocationText&quot;: &quot;${fname}&quot;,&#xd;
	  &quot;maritalStatus&quot;: ${__Random(1,2)},&#xd;
	  &quot;files&quot;: [],&#xd;
	  &quot;hasVehicle&quot;: false,&#xd;
	  &quot;vehicles&quot;: [],&#xd;
	  &quot;last2MonthsFreshUSDIncome&quot;: ${__Random(1,1000)},&#xd;
	  &quot;last2MonthsUSDIncome&quot;: ${__Random(1,1000)},&#xd;
	  &quot;last2MonthsLBPIncome&quot;: ${__Random(100000,999999)},&#xd;
	  &quot;yearlyMoneyTransfers&quot;: ${__Random(100,999999)},&#xd;
	  &quot;moneyTransfersCurrency&quot;: ${__Random(1,4)},&#xd;
	  &quot;yearlyOtherIncome&quot;: ${__Random(1,1000)},&#xd;
	  &quot;otherIncomeCurrency&quot;: ${__Random(1,2)},&#xd;
	  &quot;employmentStatus&quot;: 1,&#xd;
	  &quot;workHours&quot;: 1,&#xd;
	  &quot;taxIdentificationNumber&quot;: &quot;${__Random(111111111,999999999)}&quot;,&#xd;
	  &quot;workSector&quot;: 2,&#xd;
	  &quot;workCategory&quot;: ${__Random(1,10)},&#xd;
	  &quot;otherWorkCategory&quot;: null,&#xd;
	  &quot;publicInstitutionType&quot;: null,&#xd;
	  &quot;publicInstitution&quot;: null,&#xd;
	  &quot;workPublicClass&quot;: null,&#xd;
	  &quot;hasBankAccount&quot;: false,&#xd;
	  &quot;bankAccounts&quot;: [],&#xd;
	  &quot;bankTotalUSDDeposits&quot;: null,&#xd;
	  &quot;bankTotalFreshUSDDeposits&quot;: null,&#xd;
	  &quot;bankTotalLBPDeposits&quot;: null,&#xd;
	  &quot;bankTotalOtherDeposits&quot;: null,&#xd;
	  &quot;otherDepositsCurrency&quot;: null,&#xd;
	  &quot;uuid&quot;: 4&#xd;
	  }&#xd;
  ],&#xd;
  &quot;familyMembersLiveTogether&quot;: true,&#xd;
  &quot;termsApproved&quot;: true,&#xd;
  &quot;filledByHeadOfHouseHold&quot;: true,&#xd;
  &quot;filledByRepresentative&quot;: false,&#xd;
  &quot;representativeFatherName&quot;: null,&#xd;
  &quot;representativeFirstName&quot;: null,&#xd;
  &quot;representativeLastName&quot;: null,&#xd;
  &quot;representativeMobileNumber&quot;: null,&#xd;
  &quot;representativeFamilyRelation&quot;: null,&#xd;
  &quot;landlineNumber&quot;: &quot;01${__Random(100000,999999)}&quot;,&#xd;
  &quot;familyMembersNumber&quot;: 1,&#xd;
  &quot;locality&quot;: 1034,&#xd;
  &quot;mouhafaza&quot;: 7,&#xd;
  &quot;kadaa&quot;: 25,&#xd;
  &quot;town&quot;: 708,&#xd;
  &quot;neighborhood&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
  &quot;street&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
  &quot;ownership&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
  &quot;floor&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
  &quot;apartment&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
  &quot;nearestLocation&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
  &quot;domesticWorkersNumber&quot;: 0,&#xd;
  &quot;hasDisabledMember&quot;: false,&#xd;
  &quot;accommodations&quot;: [&#xd;
    {&#xd;
      &quot;id&quot;: ${accommodation_id},&#xd;
      &quot;type&quot;: 1,&#xd;
      &quot;property&quot;: 1,&#xd;
      &quot;area&quot;: 1,&#xd;
      &quot;roomsNumber&quot;: ${__Random(1,4)},&#xd;
      &quot;rentCurrency&quot;: null,&#xd;
      &quot;rent&quot;: null,&#xd;
      &quot;bathRoomsNumber&quot;: ${__Random(1,2)}&#xd;
    }&#xd;
  ],&#xd;
  &quot;benefitFromNPTP&quot;: false,&#xd;
  &quot;benefitFromWFP&quot;: false&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/impactservices/impact_aid_card/aid_card/v1/aid_card_audit/application/${user_id}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="get" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-Authorization" elementType="Header">
                  <stringProp name="Header.name">x-authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${surv_access_token}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">accept-encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="Synchronizing Timer" enabled="true">
              <intProp name="groupSize">5</intProp>
              <longProp name="timeoutInMs">3000</longProp>
            </SyncTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST HH Visit" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;termsApproved&quot;: true,&#xd;
  &quot;infoCertified&quot;: true,&#xd;
  &quot;essnApplicationStatus&quot;: {&#xd;
    &quot;id&quot;: 9&#xd;
  },&#xd;
  &quot;aidCardApplicationId&quot;: {&#xd;
    &quot;id&quot;: ${user_id}&#xd;
  },&#xd;
  &quot;essnHousehold&quot;: {&#xd;
    &quot;essnPerson&quot;: [&#xd;
      {&#xd;
        &quot;person&quot;: {&#xd;
          &quot;id&quot;: ${person_id},&#xd;
          &quot;familyRelation&quot;: {&#xd;
            &quot;id&quot;: 10&#xd;
          },&#xd;
          &quot;idNumber&quot;: &quot;${__Random(111111111111,999999999999)}&quot;,&#xd;
          &quot;noIdentityCard&quot;: false,&#xd;
          &quot;passportNumber&quot;: &quot;${__Random(111111111111,999999999999)}&quot;,&#xd;
          &quot;registryNumber&quot;: &quot;${__Random(111111111111,999999999999)}&quot;,&#xd;
          &quot;registryLocationText&quot;: &quot;غصيكدطش&quot;,&#xd;
          &quot;firstName&quot;: &quot;${fname}&quot;,&#xd;
          &quot;fatherName&quot;: &quot;${lname}&quot;,&#xd;
          &quot;lastName&quot;: &quot;${lname}&quot;,&#xd;
          &quot;motherFirstName&quot;: &quot;هاديا&quot;,&#xd;
          &quot;motherLastName&quot;: &quot;هاديا&quot;,&#xd;
          &quot;placeOfBirthText&quot;: &quot;ضثغأظقض&quot;,&#xd;
          &quot;gender&quot;: {&#xd;
            &quot;id&quot;: 2&#xd;
          },&#xd;
          &quot;dateOfBirth&quot;: &quot;07/02/1990&quot;,&#xd;
          &quot;maritalStatus&quot;: {&#xd;
            &quot;id&quot;: 2&#xd;
          },&#xd;
          &quot;source&quot;: &quot;AID_CARD&quot;&#xd;
        }&#xd;
      },&#xd;
      {&#xd;
        &quot;person&quot;: {&#xd;
          &quot;id&quot;: ${person_id_2},&#xd;
          &quot;familyRelation&quot;: {&#xd;
            &quot;id&quot;: 4&#xd;
          },&#xd;
          &quot;idNumber&quot;: &quot;${__Random(111111111111,999999999999)}&quot;,&#xd;
          &quot;noIdentityCard&quot;: false,&#xd;
          &quot;passportNumber&quot;: &quot;314577556052&quot;,&#xd;
          &quot;registryNumber&quot;: &quot;8745687440&quot;,&#xd;
          &quot;registryLocationText&quot;: &quot;تفسرضيج&quot;,&#xd;
          &quot;firstName&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
          &quot;fatherName&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
          &quot;lastName&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
          &quot;motherFirstName&quot;:&quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
          &quot;motherLastName&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
          &quot;placeOfBirthText&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
          &quot;gender&quot;: {&#xd;
            &quot;id&quot;: 2&#xd;
          },&#xd;
          &quot;dateOfBirth&quot;: &quot;07/01/1994&quot;,&#xd;
          &quot;maritalStatus&quot;: {&#xd;
            &quot;id&quot;: 1&#xd;
          },&#xd;
          &quot;source&quot;: &quot;AID_CARD&quot;&#xd;
        }&#xd;
      },&#xd;
      {&#xd;
        &quot;person&quot;: {&#xd;
          &quot;id&quot;: ${person_id_3},&#xd;
          &quot;familyRelation&quot;: {&#xd;
            &quot;id&quot;: 4&#xd;
          },&#xd;
          &quot;idNumber&quot;: &quot;${__Random(111111111111,999999999999)}&quot;,&#xd;
          &quot;noIdentityCard&quot;: false,&#xd;
          &quot;passportNumber&quot;: &quot;314577556052&quot;,&#xd;
          &quot;registryNumber&quot;: &quot;8745687440&quot;,&#xd;
          &quot;registryLocationText&quot;: &quot;تفسرضيج&quot;,&#xd;
          &quot;firstName&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
          &quot;fatherName&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
          &quot;lastName&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
          &quot;motherFirstName&quot;:&quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
          &quot;motherLastName&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
          &quot;placeOfBirthText&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
          &quot;gender&quot;: {&#xd;
            &quot;id&quot;: 2&#xd;
          },&#xd;
          &quot;dateOfBirth&quot;: &quot;07/01/1994&quot;,&#xd;
          &quot;maritalStatus&quot;: {&#xd;
            &quot;id&quot;: 1&#xd;
          },&#xd;
          &quot;source&quot;: &quot;AID_CARD&quot;&#xd;
        }&#xd;
      },&#xd;
      {&#xd;
        &quot;person&quot;: {&#xd;
          &quot;id&quot;: ${person_id_4},&#xd;
          &quot;familyRelation&quot;: {&#xd;
            &quot;id&quot;: 4&#xd;
          },&#xd;
          &quot;idNumber&quot;: &quot;${__Random(111111111111,999999999999)}&quot;,&#xd;
          &quot;noIdentityCard&quot;: false,&#xd;
          &quot;passportNumber&quot;: &quot;${__Random(111111111111,999999999999)}&quot;,&#xd;
          &quot;registryNumber&quot;: &quot;${__Random(111111111111,999999999999)}&quot;,&#xd;
          &quot;registryLocationText&quot;: &quot;تفسرضيج&quot;,&#xd;
          &quot;firstName&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
          &quot;fatherName&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
          &quot;lastName&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
          &quot;motherFirstName&quot;:&quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
          &quot;motherLastName&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
          &quot;placeOfBirthText&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
          &quot;gender&quot;: {&#xd;
            &quot;id&quot;: 2&#xd;
          },&#xd;
          &quot;dateOfBirth&quot;: &quot;07/01/1994&quot;,&#xd;
          &quot;maritalStatus&quot;: {&#xd;
            &quot;id&quot;: 1&#xd;
          },&#xd;
          &quot;source&quot;: &quot;AID_CARD&quot;&#xd;
        }&#xd;
      }&#xd;
      &#xd;
    ]&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/impactservices/impact_essn/essn_application/v3</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">hh_id; essn_hh_id; essnperson_1_id; essnperson_2_id; essnperson_3_id;essnperson_4_id; auditId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.id; $.essnHousehold.id; $.essnHousehold.essnPerson[0].id; $.essnHousehold.essnPerson[1].id;$.essnHousehold.essnPerson[2].id;$.essnHousehold.essnPerson[3].id; $.aidCardApplicationId.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">N_1; N_2; N_3; N_4; N_5; N_6; N_7</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">hh_id; essn_hh_id; essnperson_1_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.id; $.essnHousehold.id;$.essnHousehold.essnPerson[0].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0;0;0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND;NOT_FOUND_1; NOT_FOUND_2</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="get" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-Authorization" elementType="Header">
                  <stringProp name="Header.name">x-authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${surv_access_token}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">accept-encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="201 Ok" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="Synchronizing Timer" enabled="true">
              <intProp name="groupSize">5</intProp>
              <longProp name="timeoutInMs">3000</longProp>
            </SyncTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SEND House Visit 04" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: ${hh_id},&#xd;
  &quot;termsApproved&quot;: true,&#xd;
  &quot;infoCertified&quot;: true,&#xd;
  &quot;essnApplicationStatus&quot;: {&#xd;
    &quot;id&quot;: 10&#xd;
  },&#xd;
  &quot;aidCardApplicationId&quot;: {&#xd;
    &quot;id&quot;: ${user_id}&#xd;
  },&#xd;
  &quot;essnHousehold&quot;: {&#xd;
    &quot;id&quot;: ${essn_hh_id},&#xd;
    &quot;isRegisteredToLifeProgram&quot;: false,&#xd;
    &quot;lackOfHealthServices&quot;: false,&#xd;
    &quot;incomeType&quot;: {&#xd;
      &quot;id&quot;: 4&#xd;
    },&#xd;
    &quot;hasRealEstate&quot;: false,&#xd;
    &quot;waterSource&quot;: {&#xd;
      &quot;id&quot;: 1&#xd;
    },&#xd;
    &quot;waterSourceConsistency&quot;: {&#xd;
      &quot;id&quot;: 2&#xd;
    },&#xd;
    &quot;toiletType&quot;: {&#xd;
      &quot;id&quot;: 5&#xd;
    },&#xd;
    &quot;wasteManagementType&quot;: {&#xd;
      &quot;id&quot;: 2&#xd;
    },&#xd;
    &quot;essnHouseholdFacilities&quot;: [&#xd;
      {&#xd;
        &quot;id&quot;: 1&#xd;
      },&#xd;
      {&#xd;
        &quot;id&quot;: 2&#xd;
      },&#xd;
      {&#xd;
        &quot;id&quot;: 3&#xd;
      }&#xd;
    ],&#xd;
    &quot;mouhafaza&quot;: {&#xd;
      &quot;id&quot;: 4&#xd;
    },&#xd;
    &quot;kadaa&quot;: {&#xd;
      &quot;id&quot;: 25&#xd;
    },&#xd;
    &quot;town&quot;: {&#xd;
      &quot;id&quot;: 708&#xd;
    },&#xd;
    &quot;locality&quot;: {&#xd;
      &quot;id&quot;: 1034&#xd;
    },&#xd;
    &quot;accommodationType&quot;: {&#xd;
      &quot;id&quot;: 1&#xd;
    },&#xd;
    &quot;accommodationProperty&quot;: {&#xd;
      &quot;id&quot;: 2&#xd;
    },&#xd;
    &quot;accommodationFlooring&quot;: {&#xd;
      &quot;id&quot;: 3&#xd;
    },&#xd;
    &quot;accommodationArea&quot;: {&#xd;
      &quot;id&quot;: 2&#xd;
    },&#xd;
    &quot;roadType&quot;: {&#xd;
      &quot;id&quot;: 1&#xd;
    },&#xd;
    &quot;street&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
    &quot;building&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
    &quot;apartment&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
    &quot;floor&quot;: 2,&#xd;
    &quot;nearestLocation&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
    &quot;roomsNumber&quot;: 2,&#xd;
    &quot;bedroomsNumber&quot;: 1,&#xd;
    &quot;bathroomsNumber&quot;: 1,&#xd;
    &quot;householdIndividualsNumber&quot;: 10,&#xd;
    &quot;conflictInArea&quot;: false,&#xd;
    &quot;distanceToClosestMarket&quot;: 100,&#xd;
    &quot;longitude&quot;: &quot;35.5060960&quot;,&#xd;
    &quot;latitude&quot;: &quot;33.8905990&quot;,&#xd;
    &quot;respondantFullName&quot;: &quot;${__RandomString(7, أبتثجحخخدذرزسشصضطظعغفقكلمنهوي)}&quot;,&#xd;
    &quot;familyRelation&quot;: {&#xd;
      &quot;id&quot;: 1&#xd;
    },&#xd;
    &quot;familyMembersNumber&quot;: &quot;3&quot;,&#xd;
    &quot;hasMoreThanOneFamily&quot;: false,&#xd;
    &quot;hasBankAccount&quot;: false,&#xd;
    &quot;loanSource&quot;: {&#xd;
      &quot;id&quot;: 3&#xd;
    },&#xd;
    &quot;receivedHelpFromCountry&quot;: false,&#xd;
    &quot;receivedHelpFromNGO&quot;: false,&#xd;
    &quot;receivedMoneyFromLocalTransfer&quot;: false,&#xd;
    &quot;receivedMoneyFromForeignTransfer&quot;: false,&#xd;
    &quot;hasMobile&quot;: true,&#xd;
    &quot;mobileNumber&quot;: &quot;70${mobile}&quot;,&#xd;
    &quot;hasLandline&quot;: true,&#xd;
    &quot;landlineNumber&quot;: &quot;01${mobile}&quot;,&#xd;
    &quot;canBeCalledForFollowup&quot;: true,&#xd;
    &quot;essnPerson&quot;: [&#xd;
      {&#xd;
        &quot;id&quot;: ${essnperson_1_id},&#xd;
        &quot;person&quot;: {&#xd;
          &quot;id&quot;: ${person_id}&#xd;
        },&#xd;
        &quot;hasSkillOrTalent&quot;: false,&#xd;
        &quot;requiresAssistanceToStartBusiness&quot;: false,&#xd;
        &quot;hasWorkedInPastSevenDays&quot;: false,&#xd;
        &quot;isOnLeave&quot;: false,&#xd;
        &quot;literacy&quot;: {&#xd;
          &quot;id&quot;: 1&#xd;
        },&#xd;
        &quot;educationalLevel&quot;: {&#xd;
          &quot;id&quot;: 2&#xd;
        },&#xd;
        &quot;isRegisteredInEducationalInstitute&quot;: true,&#xd;
        &quot;educationalInstituteType&quot;: {&#xd;
          &quot;id&quot;: 2&#xd;
        },&#xd;
        &quot;hasDisabilityCard&quot;: false,&#xd;
        &quot;hasChronicDisease&quot;: false,&#xd;
        &quot;healthInsuranceType&quot;: {&#xd;
          &quot;id&quot;: 1&#xd;
        },&#xd;
        &quot;disability&quot;: {&#xd;
          &quot;id&quot;: 1&#xd;
        },&#xd;
        &quot;firstNameEn&quot;: &quot;${__RandomString(5, abcdefghijkmlnopqrstuvwxyz)}&quot;,&#xd;
        &quot;fatherNameEn&quot;: &quot;${__RandomString(5, abcdefghijkmlnopqrstuvwxyz)}&quot;,&#xd;
        &quot;lastNameEn&quot;: &quot;${__RandomString(5, abcdefghijkmlnopqrstuvwxyz)}&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;id&quot;: ${essnperson_2_id},&#xd;
        &quot;person&quot;: {&#xd;
          &quot;id&quot;: ${person_id_2}&#xd;
        },&#xd;
        &quot;hasSkillOrTalent&quot;: false,&#xd;
        &quot;requiresAssistanceToStartBusiness&quot;: false,&#xd;
        &quot;hasWorkedInPastSevenDays&quot;: false,&#xd;
        &quot;isOnLeave&quot;: false,&#xd;
        &quot;literacy&quot;: {&#xd;
          &quot;id&quot;: 1&#xd;
        },&#xd;
        &quot;educationalLevel&quot;: {&#xd;
          &quot;id&quot;: 2&#xd;
        },&#xd;
        &quot;isRegisteredInEducationalInstitute&quot;: true,&#xd;
        &quot;educationalInstituteType&quot;: {&#xd;
          &quot;id&quot;: 2&#xd;
        },&#xd;
        &quot;hasDisabilityCard&quot;: false,&#xd;
        &quot;hasChronicDisease&quot;: false,&#xd;
        &quot;healthInsuranceType&quot;: {&#xd;
          &quot;id&quot;: 1&#xd;
        },&#xd;
        &quot;disability&quot;: {&#xd;
          &quot;id&quot;: 1&#xd;
        },&#xd;
        &quot;firstNameEn&quot;: &quot;${__RandomString(5, abcdefghijkmlnopqrstuvwxyz)}&quot;,&#xd;
        &quot;fatherNameEn&quot;: &quot;${__RandomString(5, abcdefghijkmlnopqrstuvwxyz)}&quot;,&#xd;
        &quot;lastNameEn&quot;: &quot;${__RandomString(5, abcdefghijkmlnopqrstuvwxyz)}&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;id&quot;: ${essnperson_3_id},&#xd;
        &quot;person&quot;: {&#xd;
          &quot;id&quot;: ${person_id_3}&#xd;
        },&#xd;
        &quot;hasSkillOrTalent&quot;: false,&#xd;
        &quot;requiresAssistanceToStartBusiness&quot;: false,&#xd;
        &quot;hasWorkedInPastSevenDays&quot;: false,&#xd;
        &quot;isOnLeave&quot;: false,&#xd;
        &quot;literacy&quot;: {&#xd;
          &quot;id&quot;: 1&#xd;
        },&#xd;
        &quot;educationalLevel&quot;: {&#xd;
          &quot;id&quot;: 2&#xd;
        },&#xd;
        &quot;isRegisteredInEducationalInstitute&quot;: true,&#xd;
        &quot;educationalInstituteType&quot;: {&#xd;
          &quot;id&quot;: 2&#xd;
        },&#xd;
        &quot;hasDisabilityCard&quot;: false,&#xd;
        &quot;hasChronicDisease&quot;: false,&#xd;
        &quot;healthInsuranceType&quot;: {&#xd;
          &quot;id&quot;: 1&#xd;
        },&#xd;
        &quot;disability&quot;: {&#xd;
          &quot;id&quot;: 1&#xd;
        },&#xd;
        &quot;firstNameEn&quot;: &quot;${__RandomString(5, abcdefghijkmlnopqrstuvwxyz)}&quot;,&#xd;
        &quot;fatherNameEn&quot;: &quot;${__RandomString(5, abcdefghijkmlnopqrstuvwxyz)}&quot;,&#xd;
        &quot;lastNameEn&quot;: &quot;${__RandomString(5, abcdefghijkmlnopqrstuvwxyz)}&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;id&quot;: ${essnperson_4_id},&#xd;
        &quot;person&quot;: {&#xd;
          &quot;id&quot;: ${person_id_4}&#xd;
        },&#xd;
        &quot;hasSkillOrTalent&quot;: false,&#xd;
        &quot;requiresAssistanceToStartBusiness&quot;: false,&#xd;
        &quot;hasWorkedInPastSevenDays&quot;: false,&#xd;
        &quot;isOnLeave&quot;: false,&#xd;
        &quot;literacy&quot;: {&#xd;
          &quot;id&quot;: 1&#xd;
        },&#xd;
        &quot;educationalLevel&quot;: {&#xd;
          &quot;id&quot;: 2&#xd;
        },&#xd;
        &quot;isRegisteredInEducationalInstitute&quot;: true,&#xd;
        &quot;educationalInstituteType&quot;: {&#xd;
          &quot;id&quot;: 2&#xd;
        },&#xd;
        &quot;hasDisabilityCard&quot;: false,&#xd;
        &quot;hasChronicDisease&quot;: false,&#xd;
        &quot;healthInsuranceType&quot;: {&#xd;
          &quot;id&quot;: 1&#xd;
        },&#xd;
        &quot;disability&quot;: {&#xd;
          &quot;id&quot;: 1&#xd;
        },&#xd;
        &quot;firstNameEn&quot;: &quot;${__RandomString(5, abcdefghijkmlnopqrstuvwxyz)}&quot;,&#xd;
        &quot;fatherNameEn&quot;: &quot;${__RandomString(5, abcdefghijkmlnopqrstuvwxyz)}&quot;,&#xd;
        &quot;lastNameEn&quot;: &quot;${__RandomString(5, abcdefghijkmlnopqrstuvwxyz)}&quot;&#xd;
      }&#xd;
    ],&#xd;
    &quot;hasVehicle&quot;: true,&#xd;
    &quot;essnVehicles&quot;: [&#xd;
      {&#xd;
        &quot;id&quot;: 1&#xd;
      }&#xd;
    ]&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/impactservices/impact_essn/essn_application/${hh_id}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 Ok" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="hId" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">hId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="get" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-Authorization" elementType="Header">
                  <stringProp name="Header.name">x-authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${surv_access_token}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">accept-encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="Synchronizing Timer" enabled="false">
              <intProp name="groupSize">4</intProp>
              <longProp name="timeoutInMs">2500</longProp>
            </SyncTimer>
            <hashTree/>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Test C3643" enabled="true">
          <stringProp name="TestPlan.comments">Verify the user can change the essn application status from authorized to pay enrolled</stringProp>
        </GenericController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login BO Auth OTP" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;username&quot;: &quot;pmt&quot;,&#xd;
  &quot;code&quot;: &quot;1212&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/impactservices/impact_aid_card_auth_bo/auth/v2/login/otp</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="access_token" enabled="true">
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.accessToken</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 Ok" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Lookup keys" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/impactservices/impact_aid_card/aid_card/v1/lookups/keys</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 Ok" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">AUTHORIZATION</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="login wfp otp" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;username&quot;: &quot;wfpAdmin&quot;,&#xd;
   &quot;password&quot;:&quot;password#123&quot; ,&#xd;
    &quot;code&quot;: &quot;12321321&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/impactservices/impact_aid_card_auth/auth/v2/login/otp</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="access_token" enabled="true">
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.accessToken</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 Ok" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Households scheduled" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/impactservices/impact_aid_card/aid_card/v1/aid_card_audit/application/scheduled?sort=creationDateTime,desc&amp;page=0&amp;size=10&amp;search=applicationStatus:17</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.match_numbers">-1; -1</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">appStatus ; Id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..applicationStatus.type; $..id</stringProp>
              <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
              <stringProp name="JSONPostProcessor.defaultValues">NA; NO_ID</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 Ok" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">AUTHORIZATION</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">String appStatusArray = vars.get(&quot;appStatus_ALL&quot;); String[] appStatusList = appStatusArray.split(&quot;,&quot;);
for(int i=1; i&lt;=appStatusList.length; i++){
	if(!vars.get(&quot;appStatus_&quot;+i).equals(&quot;ESSN_AUTHORIZED&quot;)){
		IsSuccess = false;
		SampleResult.setStopTestNow(true);
	}
}

</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="Synchronizing Timer" enabled="false">
              <intProp name="groupSize">4</intProp>
              <longProp name="timeoutInMs">2500</longProp>
            </SyncTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API coefficients" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;threshold&quot;: 2000,&#xd;
	&quot;coefficients&quot;:[10,1,2,3,4,5,6,7,8,9,0,1,2,3,4,34,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,200,9,0,1,2,3,4]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">nptp.qa.sirenanalytics.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/nptpservices/povertyindex/coefficients</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 Ok" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Compute API" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/impactservices/impact_aid_payment</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 Ok" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">AUTHORIZATION</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Households scheduled" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/impactservices/impact_aid_card/aid_card/v1/aid_card_audit/application/scheduled?sort=creationDateTime,desc&amp;page=0&amp;size=20&amp;search=applicationStatus:20</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">newAppStatus</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..applicationStatus.type</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
              <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 Ok" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">AUTHORIZATION</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">String appStatusArray = vars.get(&quot;newAppStatus_ALL&quot;); String[] appStatusList = appStatusArray.split(&quot;,&quot;);
for(int i=1; i&lt;=appStatusList.length; i++){
	if(!vars.get(&quot;newAppStatus_&quot;+i).equals(&quot;PAY_ENROLLED&quot;)){
		IsSuccess = false;
		SampleResult.setStopTestNow(true);
	}
}

</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="Synchronizing Timer" enabled="false">
              <intProp name="groupSize">4</intProp>
              <longProp name="timeoutInMs">2500</longProp>
            </SyncTimer>
            <hashTree/>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Test C3644" enabled="true">
          <stringProp name="TestPlan.comments">Verify  the staus of the essn application will be come pay canceled if it exceeds the coefficient score</stringProp>
        </GenericController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login BO Auth OTP" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;username&quot;: &quot;pmt&quot;,&#xd;
  &quot;code&quot;: &quot;1212&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/impactservices/impact_aid_card_auth_bo/auth/v2/login/otp</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="access_token" enabled="true">
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.accessToken</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 Ok" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Lookup keys" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/impactservices/impact_aid_card/aid_card/v1/lookups/keys</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 Ok" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">AUTHORIZATION</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="login wfp otp" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;username&quot;: &quot;wfpAdmin&quot;,&#xd;
   &quot;password&quot;:&quot;password#123&quot; ,&#xd;
    &quot;code&quot;: &quot;12321321&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/impactservices/impact_aid_card_auth/auth/v2/login/otp</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="access_token" enabled="true">
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.accessToken</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 Ok" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Households scheduled" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/impactservices/impact_aid_card/aid_card/v1/aid_card_audit/application/scheduled?sort=creationDateTime,desc&amp;page=0&amp;size=10&amp;search=applicationStatus:17</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">appStatus</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..applicationStatus.type</stringProp>
              <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
              <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 Ok" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">AUTHORIZATION</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">String appStatusArray = vars.get(&quot;appStatus_ALL&quot;); String[] appStatusList = appStatusArray.split(&quot;,&quot;);
for(int i=1; i&lt;=appStatusList.length; i++){
	if(!vars.get(&quot;appStatus_&quot;+i).equals(&quot;ESSN_AUTHORIZED&quot;)){
		IsSuccess = false;
		SampleResult.setStopTestNow(true);
	}
}

</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="Synchronizing Timer" enabled="false">
              <intProp name="groupSize">4</intProp>
              <longProp name="timeoutInMs">2500</longProp>
            </SyncTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API coefficients" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;threshold&quot;: 2000,&#xd;
	&quot;coefficients&quot;:[10,1,2,3,4,5,6,7,8,9,0,1,2,3,4,34,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,200,9,0,1,2,3,4]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">nptp.qa.sirenanalytics.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/nptpservices/povertyindex/coefficients</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 Ok" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Compute API" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/impactservices/impact_aid_payment</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 Ok" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">AUTHORIZATION</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Households scheduled" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/impactservices/impact_aid_card/aid_card/v1/aid_card_audit/application/scheduled?sort=creationDateTime,desc&amp;page=0&amp;size=20&amp;search=applicationStatus:21</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">appStatus</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..applicationStatus.type</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
              <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 Ok" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">AUTHORIZATION</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">String appStatusArray = vars.get(&quot;appStatus_ALL&quot;); String[] appStatusList = appStatusArray.split(&quot;,&quot;);
for(int i=1; i&lt;=appStatusList.length; i++){
	if(!vars.get(&quot;appStatus_&quot;+i).equals(&quot;PAY_CANCELLED&quot;)){
		IsSuccess = false;
		SampleResult.setStopTestNow(true);
	}
}

</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="Synchronizing Timer" enabled="false">
              <intProp name="groupSize">4</intProp>
              <longProp name="timeoutInMs">2500</longProp>
            </SyncTimer>
            <hashTree/>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Test C3360" enabled="true">
          <stringProp name="TestPlan.comments">Verify the user can generate a new payment by calling {{AidCardPayment}}/aid_payment/v1/payments/generate/NEW</stringProp>
        </GenericController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login WFP Payor OTP" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;username&quot;: &quot;pmt&quot;,&#xd;
  &quot;code&quot;: &quot;12321321&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/impactservices/impact_aid_card_auth_bo/auth/v2/login/otp</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="access_token" enabled="true">
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.accessToken</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 Ok" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Generate Payments" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/impactservices/impact_aid_payment/aid_payment/v1/payments/generate/NEW</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 or 409" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
                <stringProp name="51517">409</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">40</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">AUTHORIZATION</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="false">
            <stringProp name="BeanShellSampler.query">String appStatusArray = vars.get(&quot;appStatus_ALL&quot;); String[] appStatusList = appStatusArray.split(&quot;,&quot;);
for(int i=1; i&lt;=appStatusList.length; i++){
	if(!vars.get(&quot;appStatus_&quot;+i).equals(&quot;ESSN_AUTHORIZED&quot;)){
		IsSuccess = false;
		SampleResult.setStopTestNow(true);
	}
}

</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="Synchronizing Timer" enabled="false">
              <intProp name="groupSize">4</intProp>
              <longProp name="timeoutInMs">2500</longProp>
            </SyncTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Test C3361" enabled="true">
          <stringProp name="TestPlan.comments">Verify the user will not be able to run another process if a payment or duplication process already running</stringProp>
        </GenericController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="external duplication API" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/impact_aid_card_prioritization/nptp-upload</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="access_token" enabled="true">
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.accessToken</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 Ok" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Test C3680" enabled="true">
          <stringProp name="TestPlan.comments">Verify the user can generate a payment for a household that has cancelled payments</stringProp>
        </GenericController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login WFP Payor OTP" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;username&quot;: &quot;pmt&quot;,&#xd;
  &quot;code&quot;: &quot;12321321&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/impactservices/impact_aid_card_auth_bo/auth/v2/login/otp</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="access_token" enabled="true">
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.accessToken</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 Ok" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Generate Payments" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/impactservices/impact_aid_payment/aid_payment/v1/payments/generate/CANCELLED</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 or 409" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
                <stringProp name="51517">409</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">40</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">AUTHORIZATION</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Test C3681" enabled="true">
          <stringProp name="TestPlan.comments">Verify the user can generate a payment for a household that has a follow up payment</stringProp>
        </GenericController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login WFP Payor OTP" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;username&quot;: &quot;pmt&quot;,&#xd;
  &quot;code&quot;: &quot;12321321&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/impactservices/impact_aid_card_auth_bo/auth/v2/login/otp</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="access_token" enabled="true">
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.accessToken</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 Ok" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Generate Payments" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/impactservices/impact_aid_payment/aid_payment/v1/payments/generate/FOLLOW_UP</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 or 409" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
                <stringProp name="51517">409</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">40</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">AUTHORIZATION</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Test C3665" enabled="true">
          <stringProp name="TestPlan.comments">Verify the user can make a payment enroll operation while defining the batch number as a parameter</stringProp>
        </GenericController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">String batchNumber = &quot;2233&quot;;
vars.put(&quot;batchNumber&quot;, batchNumber);
int length = String.valueOf(batchNumber).length();
if(length !=4){
	IsSuccess = false;
	SampleResult.setStopTestNow(true);
}
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="Synchronizing Timer" enabled="false">
              <intProp name="groupSize">4</intProp>
              <longProp name="timeoutInMs">2500</longProp>
            </SyncTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login BO Auth OTP" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;username&quot;: &quot;pmt&quot;,&#xd;
  &quot;code&quot;: &quot;1212&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/impactservices/impact_aid_card_auth_bo/auth/v2/login/otp</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="access_token" enabled="true">
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.accessToken</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 Ok" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Lookup keys" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/impactservices/impact_aid_card/aid_card/v1/lookups/keys</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 Ok" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">AUTHORIZATION</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="login wfp otp" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;username&quot;: &quot;wfpAdmin&quot;,&#xd;
   &quot;password&quot;:&quot;password#123&quot; ,&#xd;
    &quot;code&quot;: &quot;12321321&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/impactservices/impact_aid_card_auth/auth/v2/login/otp</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="access_token" enabled="true">
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.accessToken</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 Ok" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Households scheduled" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/impactservices/impact_aid_card/aid_card/v1/aid_card_audit/application/scheduled?sort=creationDateTime,desc&amp;page=0&amp;size=10&amp;search=applicationStatus:17</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.match_numbers">-1; -1</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">appStatus ; Id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..applicationStatus.type; $..id</stringProp>
              <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
              <stringProp name="JSONPostProcessor.defaultValues">NA; NO_ID</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 Ok" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">AUTHORIZATION</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">String appStatusArray = vars.get(&quot;appStatus_ALL&quot;); String[] appStatusList = appStatusArray.split(&quot;,&quot;);
for(int i=1; i&lt;=appStatusList.length; i++){
	if(!vars.get(&quot;appStatus_&quot;+i).equals(&quot;ESSN_AUTHORIZED&quot;)){
		IsSuccess = false;
		SampleResult.setStopTestNow(true);
	}
}

</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="Synchronizing Timer" enabled="false">
              <intProp name="groupSize">4</intProp>
              <longProp name="timeoutInMs">2500</longProp>
            </SyncTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API coefficients" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;threshold&quot;: 2000,&#xd;
	&quot;coefficients&quot;:[10,1,2,3,4,5,6,7,8,9,0,1,2,3,4,34,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,200,9,0,1,2,3,4]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">nptp.qa.sirenanalytics.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/nptpservices/povertyindex/coefficients</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 Ok" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Compute API" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/impactservices/impact_aid_payment</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 Ok" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">AUTHORIZATION</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Households scheduled" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/impactservices/impact_aid_card/aid_card/v1/aid_card_audit/application/scheduled?sort=creationDateTime,desc&amp;page=0&amp;size=20&amp;search=applicationStatus:20</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">newAppStatus</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..applicationStatus.type</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
              <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 Ok" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">AUTHORIZATION</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">String appStatusArray = vars.get(&quot;newAppStatus_ALL&quot;); String[] appStatusList = appStatusArray.split(&quot;,&quot;);
for(int i=1; i&lt;=appStatusList.length; i++){
	if(!vars.get(&quot;newAppStatus_&quot;+i).equals(&quot;PAY_ENROLLED&quot;)){
		IsSuccess = false;
		SampleResult.setStopTestNow(true);
	}
}

</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="Synchronizing Timer" enabled="false">
              <intProp name="groupSize">4</intProp>
              <longProp name="timeoutInMs">2500</longProp>
            </SyncTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Test" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Critical Section Controller" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.google.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="false">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
